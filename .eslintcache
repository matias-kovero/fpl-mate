[{"C:\\Projects\\fpl-mate\\src\\index.js":"1","C:\\Projects\\fpl-mate\\src\\App.js":"2","C:\\Projects\\fpl-mate\\src\\reportWebVitals.js":"3","C:\\Projects\\fpl-mate\\src\\PremierContext\\PremierState.js":"4","C:\\Projects\\fpl-mate\\src\\ApiErrorContext\\index.js":"5","C:\\Projects\\fpl-mate\\src\\PremierContext\\PremierContext.js":"6","C:\\Projects\\fpl-mate\\src\\PremierContext\\PremierReducer.js":"7","C:\\Projects\\fpl-mate\\src\\ApiErrorContext\\useAPIError.js":"8","C:\\Projects\\fpl-mate\\src\\PremierContext\\types.js":"9","C:\\Projects\\fpl-mate\\src\\Navbar\\index.js":"10","C:\\Projects\\fpl-mate\\src\\LandingPage\\index.js":"11","C:\\Projects\\fpl-mate\\src\\ApiErrorContext\\ApiErrorProvider.js":"12","C:\\Projects\\fpl-mate\\src\\ApiErrorContext\\ApiErrorNotification.js":"13","C:\\Projects\\fpl-mate\\src\\MainApp\\index.js":"14","C:\\Projects\\fpl-mate\\src\\SettingsPage\\index.js":"15","C:\\Projects\\fpl-mate\\src\\PremierContext\\index.js":"16","C:\\Projects\\fpl-mate\\src\\LandingPage\\SearchUser\\index.js":"17","C:\\Projects\\fpl-mate\\src\\LandingPage\\RecentUsers\\index.js":"18","C:\\Projects\\fpl-mate\\src\\MainApp\\Profile\\index.js":"19","C:\\Projects\\fpl-mate\\src\\MainApp\\Fixtures\\index.js":"20","C:\\Projects\\fpl-mate\\src\\MainApp\\Leagues\\index.js":"21","C:\\Projects\\fpl-mate\\src\\MainApp\\usePremierData.js":"22","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\SearchUser\\index.js":"23","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\UserTeam\\index.js":"24","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\UserInfo\\index.js":"25","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\PlayerCard\\index.js":"26","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\ModalTeam\\index.js":"27","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\LeagueInfo\\index.js":"28","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\PlayerSuggestion\\temp.js":"29","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\PlayerSuggestion\\index.js":"30","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\UserTeamSmall\\index.js":"31","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\PlayerFixtures\\index.js":"32","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\ModalPlayer\\index.js":"33","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\PlayerHistory\\index.js":"34","C:\\Projects\\fpl-mate\\src\\SettingsPage\\components\\Cache\\index.js":"35","C:\\Projects\\fpl-mate\\src\\SettingsPage\\components\\Standings\\index.js":"36","C:\\Projects\\fpl-mate\\src\\SettingsPage\\components\\Leagues\\index.js":"37"},{"size":844,"mtime":1612188308002,"results":"38","hashOfConfig":"39"},{"size":2736,"mtime":1612693729491,"results":"40","hashOfConfig":"39"},{"size":375,"mtime":1612188308004,"results":"41","hashOfConfig":"39"},{"size":9511,"mtime":1612376276746,"results":"42","hashOfConfig":"39"},{"size":216,"mtime":1612188307931,"results":"43","hashOfConfig":"39"},{"size":115,"mtime":1612188307969,"results":"44","hashOfConfig":"39"},{"size":1007,"mtime":1612252238270,"results":"45","hashOfConfig":"39"},{"size":258,"mtime":1612188307931,"results":"46","hashOfConfig":"39"},{"size":322,"mtime":1612252205655,"results":"47","hashOfConfig":"39"},{"size":680,"mtime":1612188307968,"results":"48","hashOfConfig":"39"},{"size":2694,"mtime":1612188307936,"results":"49","hashOfConfig":"39"},{"size":710,"mtime":1612188307930,"results":"50","hashOfConfig":"39"},{"size":816,"mtime":1612188307929,"results":"51","hashOfConfig":"39"},{"size":2032,"mtime":1612251179241,"results":"52","hashOfConfig":"39"},{"size":585,"mtime":1612357590025,"results":"53","hashOfConfig":"39"},{"size":14266,"mtime":1612188307989,"results":"54","hashOfConfig":"39"},{"size":3206,"mtime":1612188307935,"results":"55","hashOfConfig":"39"},{"size":1407,"mtime":1612188307934,"results":"56","hashOfConfig":"39"},{"size":8051,"mtime":1612188307938,"results":"57","hashOfConfig":"39"},{"size":13092,"mtime":1612694449639,"results":"58","hashOfConfig":"39"},{"size":1978,"mtime":1612694441970,"results":"59","hashOfConfig":"39"},{"size":19025,"mtime":1612692857610,"results":"60","hashOfConfig":"39"},{"size":2746,"mtime":1612188307957,"results":"61","hashOfConfig":"39"},{"size":5877,"mtime":1612692964923,"results":"62","hashOfConfig":"39"},{"size":4949,"mtime":1612188307958,"results":"63","hashOfConfig":"39"},{"size":4072,"mtime":1612188307944,"results":"64","hashOfConfig":"39"},{"size":6146,"mtime":1612188307941,"results":"65","hashOfConfig":"39"},{"size":9206,"mtime":1612694436436,"results":"66","hashOfConfig":"39"},{"size":11053,"mtime":1612188307947,"results":"67","hashOfConfig":"39"},{"size":8757,"mtime":1612188307946,"results":"68","hashOfConfig":"39"},{"size":5626,"mtime":1612356561438,"results":"69","hashOfConfig":"39"},{"size":2801,"mtime":1612188307945,"results":"70","hashOfConfig":"39"},{"size":5146,"mtime":1612188307940,"results":"71","hashOfConfig":"39"},{"size":6016,"mtime":1612188307945,"results":"72","hashOfConfig":"39"},{"size":1264,"mtime":1612357555120,"results":"73","hashOfConfig":"39"},{"size":747,"mtime":1612270898540,"results":"74","hashOfConfig":"39"},{"size":659,"mtime":1612271998502,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"h1j8lm",{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"126","usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"78"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"78"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"78"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"78"},"C:\\Projects\\fpl-mate\\src\\index.js",[],["175","176"],"C:\\Projects\\fpl-mate\\src\\App.js",["177"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport Menu from 'react-burger-menu/lib/menus/slide';\r\nimport './App.css';\r\nimport PremierContext from './PremierContext/PremierContext';\r\n\r\nimport Landing    from './LandingPage';\r\nimport Navbar     from './Navbar';\r\nimport MainApp, { LoadingScreen }    from './MainApp';\r\nimport Settings   from './SettingsPage';\r\n\r\nexport default function App() {\r\n  const context = useContext(PremierContext);\r\n  const [ menuOpen, setMenu ] = useState(false);\r\n  const [ page, setPage ] = useState('');\r\n\r\n  useEffect(() => {\r\n  }, [ context ]);\r\n\r\n  // This keeps your state in sync with the opening/closing of the menu\r\n  // via the default means, e.g. clicking the X, pressing the ESC key etc.\r\n  const handleChange = (e) => {\r\n    setMenu(e.isOpen);\r\n  }\r\n  const closeMenu = () => {\r\n    setMenu(false);\r\n  }\r\n  const toggleMenu = () => {\r\n    setMenu(!menuOpen);\r\n  }\r\n\r\n  const findUser = () => {\r\n    closeMenu();\r\n    context.clearProfile();\r\n    context.setDefaultPage(\"Profile\");\r\n  }\r\n\r\n  const switchPage = (page) => {\r\n    closeMenu();\r\n    setPage(page);\r\n  }\r\n\r\n  const manageContent = (key) => {\r\n    switch(key) {\r\n      case \"Search\":\r\n        return <Landing openMainPage={ () => switchPage('') } />\r\n      case \"Settings\":\r\n        return <Settings />\r\n      default:\r\n        return <MainApp team={context.team} context={context} searchProfile={context.GetTeamInfo} activePage={context.setDefaultPage} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"outher-container\" style={{height: '100%'}}>\r\n      { !context.loaded ? <LoadingScreen /> : context.team ?\r\n      <>\r\n      <Menu\r\n        right width={230}\r\n        pageWrapId=\"page-wrap\" \r\n        outerContainerId=\"outher-container\"\r\n        isOpen={menuOpen}\r\n        onStateChange={handleChange}\r\n        disableAutoFocus\r\n        customBurgerIcon={false}\r\n        itemListElement=\"div\"\r\n      >\r\n        <div id=\"home\" className=\"menu-item\" onClick={() => switchPage('Search')}>\r\n          <div>\r\n            <i className=\"fas fa-user\"></i>\r\n            <span>Find User</span>\r\n          </div>\r\n        </div>\r\n        <div id=\"home\" className=\"menu-item\" onClick={() => switchPage('Settings')}>\r\n          <div>\r\n            <i className=\"fas fa-cog\"></i>\r\n            <span>Settings</span>\r\n          </div>\r\n        </div>\r\n      </Menu>\r\n      <main id=\"page-wrap\" style={{ overflow: 'auto', height: '100%'}}>\r\n        <Navbar toggleMenu={toggleMenu} returnHome={() => setPage('')} />\r\n        { manageContent(page) }\r\n        {/*<MainApp team={context.team} context={context} searchProfile={context.GetTeamInfo} activePage={context.setDefaultPage} />*/}\r\n      </main></> : <Landing /> }\r\n    </div>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\reportWebVitals.js",[],"C:\\Projects\\fpl-mate\\src\\PremierContext\\PremierState.js",["178"],"import React, { useReducer, useEffect } from 'react';\r\nimport { SET_SEASON, SET_TEAM, SET_ELEMENTS, SET_FIXTURES, SET_USER, SET_RECENT, SET_PAGE, SET_LOADED } from './types';\r\nimport PremierContext from './PremierContext';\r\nimport PremierReducer from './PremierReducer';\r\nimport useAPIError from '../ApiErrorContext/useAPIError';\r\n\r\nconst API_BASE_URL = 'https://fpl-server.vercel.app/api';\r\n\r\nconst initialState = {\r\n  season: null,\r\n  team: null,\r\n  defaultUser: localStorage.getItem('defaultUser'),\r\n  defaultPage: localStorage.getItem('defaultPage'),\r\n  recents: JSON.parse(localStorage.getItem('recentSearches') || \"[]\" ),\r\n  elements: null,\r\n  fixtures: null,\r\n  loaded: false,\r\n};\r\n\r\nconst PremierState = ({ children }) => {\r\n  const { addError } = useAPIError();\r\n  const [ state, dispatch ] = useReducer(PremierReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    async function initialInfo() {\r\n      await getSeasonInfo();\r\n      await getFixtures();\r\n    }\r\n    initialInfo();\r\n    async function initialSearch(profile) {\r\n      await searchProfile(profile);\r\n      dispatch({ type: SET_LOADED, payload: true });\r\n    }\r\n    \r\n    if (state.defaultUser && state.defaultUser != 0) {\r\n      initialSearch(state.defaultUser);\r\n    } else {\r\n      dispatch({ type: SET_LOADED, payload: true });\r\n    }\r\n  }, [ ]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  \r\n  const getSeasonInfo = async() => {\r\n    const endpoint = `${API_BASE_URL}/bootstrap-static/`;\r\n    let res = await fetch(endpoint, { method: 'GET' });\r\n    if ([200].includes(res.status)) {\r\n      let json = await res.json();\r\n      dispatch({ type: SET_SEASON, payload: json });\r\n      dispatch({ type: SET_ELEMENTS, payload: json.elemets });\r\n      // Save local fallback\r\n      localStorage.setItem('season', JSON.stringify(json));\r\n      return json;\r\n    } else {\r\n      addError(`Failed to fetch season info - ${res.status}`);\r\n      throw Error(`${res.status} - ${res.statusText}`);\r\n    }\r\n  }\r\n\r\n  const getFixtures = async() => {\r\n    const endpoint = `${API_BASE_URL}/fixtures/`;\r\n    let res = await fetch(endpoint, { method: 'GET' });\r\n    if ([200].includes(res.status)) {\r\n      let json = await res.json();\r\n      dispatch({ type: SET_FIXTURES, payload: json });\r\n      return json;\r\n    } else {\r\n      addError(`Failed to get fixtures -  ${res.status}`);\r\n    }\r\n  }\r\n\r\n  const getRecentProfiles = () => {\r\n    return JSON.parse(localStorage.getItem('recentSearches') || \"[]\" );\r\n  }\r\n\r\n  const addToRecentSearches = (search) => {\r\n    let recents = getRecentProfiles();\r\n    let previous = recents.findIndex(r => r.id === search.id);\r\n    // Check if user is already found on recents.\r\n    if (previous !== -1) {\r\n      recents.splice(previous, 1);\r\n      // Remove it from the array !! - Retarded aproach, pls hit me.\r\n      // recent = recent.filter(r => r.id != search.id);\r\n    }\r\n    recents.unshift({ id: search.id, name: search.name, owner: search.owner });\r\n    localStorage.setItem('recentSearches', JSON.stringify(recents));\r\n    dispatch({ type: SET_RECENT, payload: recents });\r\n  }\r\n\r\n  const removeFromRecents = (id) => {\r\n    let recents = getRecentProfiles();\r\n    let idx = recents.findIndex(r => r.id === id);\r\n    if (idx !== -1) recents.splice(idx, 1);\r\n    localStorage.setItem('recentSearches', JSON.stringify(recents));\r\n    dispatch({ type: SET_RECENT, payload: recents });\r\n  }\r\n\r\n  const forceUpdateFixtures = async() => {\r\n    const endpoint = `${API_BASE_URL}/fixtures/`;\r\n    let res = await fetch(endpoint, { method: 'GET' });\r\n    if ([200].includes(res.status)) {\r\n      let json = await res.json();\r\n      dispatch({ type: SET_FIXTURES, payload: json });\r\n      return json;\r\n    } else {\r\n      addError(`Failed to get fixtures -  ${res.status}`);\r\n    }\r\n  }\r\n\r\n  const searchProfile = async (id) => {\r\n    if (!id) throw Error('Missing Team ID');\r\n    const endpoint = `${API_BASE_URL}/entry/${id}/`;\r\n    let res = await fetch(endpoint, { method: 'GET' });\r\n\r\n    if ([200].includes(res.status)) {\r\n      let json = await res.json();\r\n      // Add user to current team\r\n      dispatch({ type: SET_TEAM, payload: json });\r\n      let user = {\r\n        id: json.id,\r\n        name: json.name,\r\n        owner: `${json.player_first_name} ${json.player_last_name}`\r\n      };\r\n      addToRecentSearches(user);\r\n      // Add profile to recent searches.\r\n    } else if ([503].includes(res.status)) {\r\n      let errTxt = await (await res.text()).replaceAll('\"', '');\r\n      dispatch({ type: SET_TEAM, payload: { err: errTxt } });\r\n      //this.setTeam({ err: errTxt });\r\n    } else if ([404].includes(res.status)) {\r\n      addError('Team not found, please check Team ID', res.status);\r\n    } else {\r\n      addError(`${res.statusText} - ${res.status}`);\r\n      //throw Error(`${res.status} - ${res.statusText}`);\r\n    }\r\n  }\r\n\r\n  const clearProfile = () => {\r\n    dispatch({ type: SET_TEAM, payload: null });\r\n  }\r\n\r\n  const setDefaultUser = (user) => {\r\n    dispatch({ type: SET_USER, payload: user });\r\n    localStorage.setItem('defaultUser', JSON.stringify(user));\r\n    //return state.defaultUser;\r\n  }\r\n\r\n  const removeDefaultUser = () => {\r\n    dispatch({ type: SET_USER, payload: 0 });\r\n    localStorage.setItem('defaultUser', JSON.stringify(0));\r\n  }\r\n\r\n  const setDefaultPage = (page) => {\r\n    dispatch({ type: SET_PAGE, payload: page });\r\n    localStorage.setItem('defaultPage', page);\r\n  }\r\n  /**\r\n   * Will get users squad of the specified gameweek.\r\n   * @param {Number} id - Users Team ID \r\n   * @param {Number} gameweek - Gameweek we want to query \r\n   */\r\n  const getSquad = async(id, gameweek) => {\r\n    if (!id) return addError('Unable to find squad. Unkown team ID.');\r\n    else if (!gameweek) return addError('Unable to get gameweek.');\r\n    const endpoint = `${API_BASE_URL}/entry/${id}/event/${gameweek}/picks/`;\r\n    let res = await fetch(endpoint, { method: 'GET' });\r\n    if ([200].includes(res.status)) {\r\n      let json = await res.json();\r\n      return json;\r\n    } else {\r\n      addError('Failed to fetch squad. Please try again later.');\r\n    }\r\n  }\r\n  /**\r\n   * Will get players information\r\n   * @param {Number} id - Player ID \r\n   */\r\n  const getPlayerInfo = async(id) => {\r\n    if (!id) { \r\n      addError('Unable to get player ID.');\r\n      return;\r\n    }\r\n    const endpoint = `${API_BASE_URL}/element-summary/${id}/`;\r\n    let res = await fetch(endpoint, { method: 'GET' });\r\n    if ([200].includes(res.status)) {\r\n      let json = await res.json();\r\n      return json;\r\n    } else {\r\n      addError('Failed to fetch player information. Please try again later.');\r\n      return;\r\n    }\r\n  }\r\n  /**\r\n   * Will query live stats of the specified gameweek.\r\n   * @param {Number} gameweek - Gamewekk we want to query \r\n   */\r\n  const getLiveStats = async(gameweek) => {\r\n    if (!gameweek) {\r\n      addError('Unable to get gameweek.');\r\n      return;\r\n    }\r\n    const endpoint = `${API_BASE_URL}/event/${gameweek}/live/`;\r\n    let res = await fetch(endpoint, { method: 'GET' });\r\n    if ([200].includes(res.status)) {\r\n      let json = await res.json();\r\n      return json;\r\n    } else {\r\n      addError('Failed to fetch live stats. Please try again later.');\r\n    }\r\n  }\r\n\r\n  const getLeagueStandings = async(league_id) => {\r\n    if (!league_id) {\r\n      addError('Unable to get league information.');\r\n      return;\r\n    }\r\n    const endpoint = `${API_BASE_URL}/leagues-classic/${league_id}/standings/`;\r\n    let res = await fetch(endpoint, { method: 'GET' });\r\n    if ([200].includes(res.status)) {\r\n      let json = await res.json();\r\n      return json;\r\n    } else {\r\n      addError('Failed to fetch league information.');\r\n    }\r\n  }\r\n\r\n  const updateLeagueStandings = async(league_id, page) => {\r\n    if (!league_id || !page) {\r\n      addError('Unable to fetch league standings');\r\n      return;\r\n    }\r\n    const endpoint = `${API_BASE_URL}/leagues-classic/${league_id}/standings/?page_new_entries=1&page_standings=${page}`;\r\n    let res = await fetch(endpoint, { method: 'GET' });\r\n    if ([200].includes(res.status)) {\r\n      let json = await res.json();\r\n      return json;\r\n    } else {\r\n      addError('Failed to fetch league standings.');\r\n    }\r\n  }\r\n\r\n  // Delete recent searched profiles, defaultProfile and defaultPage\r\n  const clearCache = () => {\r\n    // Delete default User\r\n    removeDefaultUser();\r\n    // Delete recent searches\r\n    localStorage.setItem('recentSearches', JSON.stringify([]));\r\n    dispatch({ type: SET_RECENT, payload: [] });\r\n    // Delete defaultPage\r\n    setDefaultPage('');\r\n  }\r\n\r\n  return (\r\n    <PremierContext.Provider \r\n      value={{\r\n        loaded: state.loaded,\r\n        team: state.team,\r\n        season: state.season,\r\n        elements: state.elements,\r\n        fixtures: state.fixtures,\r\n        defaultUser: state.defaultUser,\r\n        recentSearches: state.recents,\r\n        defaultPage: state.defaultPage,\r\n        searchProfile,\r\n        clearProfile,\r\n        setDefaultPage,\r\n        getSquad,\r\n        getPlayerInfo,\r\n        getLiveStats,\r\n        setDefaultUser,\r\n        removeDefaultUser,\r\n        removeFromRecents,\r\n        getRecentSearches: getRecentProfiles,\r\n        getLeagueStandings,\r\n        updateLeagueStandings,\r\n        clearCache,\r\n        // These are old code -> SHOULD REMOVE THESE\r\n        GetFixtures: forceUpdateFixtures,\r\n        GetTeamInfo: searchProfile\r\n      }}\r\n    >\r\n      {children}\r\n    </PremierContext.Provider>\r\n  )\r\n}\r\n\r\nexport default PremierState;","C:\\Projects\\fpl-mate\\src\\ApiErrorContext\\index.js",[],"C:\\Projects\\fpl-mate\\src\\PremierContext\\PremierContext.js",[],"C:\\Projects\\fpl-mate\\src\\PremierContext\\PremierReducer.js",["179"],"import { SET_SEASON, SET_TEAM, SET_ELEMENTS, SET_FIXTURES, SET_USER, SET_RECENT, SET_PAGE, SET_LOADED } from './types';\r\n\r\nexport default (state, action) => {\r\n  const { payload, type } = action;\r\n\r\n  switch (type) {\r\n    case SET_LOADED: \r\n      return {\r\n        ...state,\r\n        loaded: payload\r\n      };\r\n    case SET_SEASON:\r\n      return {\r\n        ...state,\r\n        season: payload\r\n      };\r\n    case SET_TEAM:\r\n      return {\r\n        ...state,\r\n        team: payload\r\n      };\r\n    case SET_ELEMENTS:\r\n      return {\r\n        ...state,\r\n        elements: payload\r\n      };\r\n    case SET_FIXTURES:\r\n      return {\r\n        ...state,\r\n        fixtures: payload\r\n      };\r\n    case SET_USER:\r\n      return {\r\n        ...state,\r\n        defaultUser: payload\r\n      };\r\n    case SET_RECENT:\r\n      return {\r\n        ...state,\r\n        recents: payload\r\n      };\r\n    case SET_PAGE:\r\n      return {\r\n        ...state,\r\n        defaultPage: payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","C:\\Projects\\fpl-mate\\src\\ApiErrorContext\\useAPIError.js",[],"C:\\Projects\\fpl-mate\\src\\PremierContext\\types.js",[],"C:\\Projects\\fpl-mate\\src\\Navbar\\index.js",[],"C:\\Projects\\fpl-mate\\src\\LandingPage\\index.js",[],"C:\\Projects\\fpl-mate\\src\\ApiErrorContext\\ApiErrorProvider.js",[],"C:\\Projects\\fpl-mate\\src\\ApiErrorContext\\ApiErrorNotification.js",["180"],"import React, { useEffect } from 'react';\r\nimport useAPIError from './useAPIError';\r\nimport { Toast } from 'react-bootstrap';\r\n\r\nfunction APIErrorNotification() {\r\n  const { error, removeError } = useAPIError();\r\n\r\n  const handleSubmit = () => {\r\n    removeError();\r\n  };\r\n\r\n  return (\r\n    <div style={{position: 'absolute', top: '0', right: '1rem', paddingTop: '1rem' }}>\r\n      <div style={{ position: 'sticky', top: '1rem', right: '1rem', zIndex: '1030'}}>\r\n        <Toast onClose={handleSubmit} show={!!error} delay={5000} autohide>\r\n          <Toast.Header>\r\n            <strong className=\"mr-auto\">Error</strong>\r\n          </Toast.Header>\r\n          {error && error.message && <Toast.Body>{error.message}</Toast.Body>}\r\n        </Toast>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default APIErrorNotification;","C:\\Projects\\fpl-mate\\src\\MainApp\\index.js",["181"],"import React from 'react';\r\nimport { Tab, Nav, Spinner } from 'react-bootstrap';\r\n\r\nimport Profile from './Profile';\r\nimport Fixtures from './Fixtures';\r\nimport Leagues from './Leagues';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {import('../PremierContext/premier').EntryObject } props.team Users Team \r\n */\r\nexport default function MainApp({ team, context, searchProfile, activePage }) {\r\n  \r\n  return (\r\n    <Tab.Container id=\"main-content-tabs\" defaultActiveKey={context.defaultPage ? context.defaultPage : \"Profile\" }>\r\n      <div className=\"app-header-container\">\r\n        <div className=\"layout-wrapper\">\r\n          <div className=\"styled-player-component\">\r\n            <div className=\"app-header\">\r\n              <h1 className=\"app-game-title\">Fantasy</h1>\r\n              <Nav className=\"nav-tabs\" onSelect={(selectedKey) => activePage(selectedKey)}>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"Profile\">Profile</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"Fixtures\">Fixtures</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"Leagues\">Leagues</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      { context.season && context.fixtures ? \r\n      <Tab.Content>\r\n        <Tab.Pane eventKey=\"Profile\">\r\n          <Profile user={team} searchProfile={searchProfile} />\r\n        </Tab.Pane>\r\n        <Tab.Pane eventKey=\"Fixtures\">\r\n          <Fixtures />\r\n        </Tab.Pane>\r\n        <Tab.Pane eventKey=\"Leagues\">\r\n          <Leagues user={team} />\r\n        </Tab.Pane>\r\n      </Tab.Content> \r\n      : <LoadingScreen /> }\r\n    </Tab.Container>\r\n  )\r\n}\r\n\r\nexport const LoadingScreen = ({}) => {\r\n\r\n  return (\r\n    <div className=\"loading-wrapper\">\r\n      <div className=\"loading-container\">\r\n        <Spinner animation=\"grow\" style={{ backgroundColor: '#02894e'}} />\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\SettingsPage\\index.js",["182","183","184"],"import React from 'react';\r\nimport { Accordion } from 'react-bootstrap';\r\n\r\nimport Cache from './components/Cache';\r\nimport League from './components/Leagues';\r\nimport Standings from './components/Standings';\r\n\r\nexport default function SettingsPage({}) {\r\n\r\n  return (\r\n    <div className=\"layout-wrapper\">\r\n      <div className=\"settings-main\">\r\n        <Accordion defaultActiveKey=\"\" className=\"settings-buttons\">\r\n          <Cache eventKey={1} />\r\n          {/*<League eventKey={2} />\r\n          <Standings eventKey={3} /> */}\r\n        </Accordion>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\PremierContext\\index.js",[],"C:\\Projects\\fpl-mate\\src\\LandingPage\\SearchUser\\index.js",["185"],"import React, { Fragment, useState } from 'react';\r\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\r\nimport { InputGroup, Button } from 'react-bootstrap';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\n\r\nconst SEARCH_URI = 'https://fpl-server.vercel.app/search';\r\n\r\nexport default function AsyncExample({ searchProfile }) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const [id, setId] = useState('');\r\n\r\n  const handleSearch = (query) => {\r\n    setIsLoading(true);\r\n\r\n    fetch(`${SEARCH_URI}/${query}`)\r\n      .then((resp) => resp.json())\r\n      .then((items) => {\r\n        const options = items.map((i) => {\r\n          let [owner, team] = i.label.split(',', 2);\r\n          return ({\r\n            value: i.value,\r\n            id: i.value,\r\n            label: i.label,\r\n            owner,\r\n            team\r\n          })\r\n        });\r\n\r\n        setOptions(options);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setOptions([{\r\n          value: '',\r\n          id: '',\r\n          label: '',\r\n          owner: '0 results',\r\n          team: 'Please check your search'\r\n        }])\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const selectUser = (user) => {\r\n    if (!user) return;\r\n    searchProfile(user);\r\n  }\r\n\r\n  const updateId = (userId) => {\r\n    setId(userId);\r\n  }\r\n\r\n  const searchButtonClick = () => {\r\n    if (!id || id.length <= 0 || isNaN(id)) return null;\r\n    // Trigger animation...\r\n    let bg = document.getElementById('emoji-bg');\r\n    let logo = document.getElementById('page-logo');\r\n    bg.classList.add('animate-bg');\r\n    logo.classList.add('animate-logo');\r\n    // After 1s fetch user information\r\n    setTimeout(() => {\r\n      searchProfile(id);\r\n      bg.classList.remove('animate-bg');\r\n      logo.classList.remove('animate-logo');\r\n    }, 900);\r\n  }\r\n\r\n  // Bypass client-side filtering by returning `true`. Results are already\r\n  // filtered by the search endpoint, so no need to do it again.\r\n  const filterBy = () => true;\r\n\r\n  return (\r\n    <InputGroup className=\"\" size=\"md\">\r\n      <AsyncTypeahead\r\n        filterBy={filterBy}\r\n        id=\"async-example\"\r\n        isLoading={isLoading}\r\n        labelKey=\"label\"\r\n        minLength={3}\r\n        onSearch={handleSearch}\r\n        options={options}\r\n        placeholder=\"Start by typing your Team, Manager or ID\"\r\n        renderMenuItemChildren={(option, props) => (\r\n          <Fragment>\r\n            <div className=\"user-search-option\" onClick={() => {\r\n              updateId(option.value);\r\n              //selectUser(option.value);\r\n            }}>\r\n              <div className=\"search-option-owner\">\r\n                <span>{option.owner}</span>\r\n              </div>\r\n              <div className=\"search-option-team\">\r\n                <span>{option.team}</span>\r\n              </div>\r\n            </div>\r\n          </Fragment>\r\n        )}\r\n      />\r\n      <InputGroup.Append className=\"landing-buttongroup\">\r\n        <Button variant=\"light\" onClick={searchButtonClick}><span style={{lineHeight: '2rem', verticalAlign: 'bottom'}}>Go</span></Button>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n  );\r\n};","C:\\Projects\\fpl-mate\\src\\LandingPage\\RecentUsers\\index.js",["186","187"],"import React from 'react';\r\nimport PremierContext from '../../PremierContext';\r\n\r\nexport default function RecentUser({ user, switchPage }){\r\n  // user: {id, name, owner}\r\n\r\n  // Check if user is default user.\r\n  const { searchProfile, defaultUser, setDefaultUser, removeDefaultUser, removeFromRecents } = React.useContext(PremierContext);\r\n\r\n  return (\r\n    <div className=\"recent-profile\">\r\n      <div className=\"recent-profile-content\" onClick={() => {\r\n          searchProfile(user.id);\r\n          if (switchPage) switchPage();\r\n        }\r\n      }>\r\n        <div className=\"recent-profile-default\">{user.id == defaultUser && <i className=\"fas fa-star\" />}</div>\r\n        <div className=\"recent-profile-info\">\r\n          <div className=\"recent-name\"><b>{user.owner}</b></div>\r\n          <div className=\"recent-owner\"><small>{user.name}</small></div>\r\n        </div>\r\n      </div>\r\n      <div className=\"recent-profile-buttons\">\r\n        <div className=\"recent-profile-favourite\">\r\n            { user.id != defaultUser ? \r\n              <i className=\"far fa-heart\" onClick={() => setDefaultUser(user.id)} /> :\r\n              <i className=\"fas fa-heart\" onClick={() => removeDefaultUser()} />\r\n            }\r\n        </div>\r\n        <div className=\"recent-profile-remove\">\r\n          <i className=\"fas fa-times\" onClick={() => removeFromRecents(user.id)} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\MainApp\\Profile\\index.js",["188","189","190","191","192","193","194","195","196","197","198","199"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\n\r\nimport SearchUser from '../components/SearchUser';\r\n//import UserInfo   from '../../MainPage/Profile/TeamInfo';\r\nimport PremierContext from '../../PremierContext';\r\nimport usePremierData from '../usePremierData';\r\n\r\nimport UserInfo   from '../components/UserInfo';\r\nimport UserTeam   from '../components/UserTeam';\r\n//import PitchView  from '../components/PitchView';\r\n\r\nexport default function Profile({ user }) {\r\n  /*\r\n  const [ team, setTeam ] = useState(user);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n\r\n    }\r\n  }, [ user ])*/\r\n\r\n  /**\r\n   * Should we load all needed information already here. And only give components their needed info.\r\n   * Load:\r\n   * - Users picks\r\n   * - Live data (able to calculate player points + BPS, before the match ends!)\r\n   * - Team Fixtures\r\n   */\r\n  return (\r\n    <div className=\"layout-wrapper\">\r\n      { user && user.id ? \r\n          <ActiveProfile user={user} />\r\n          : ( user && user.err ? \r\n          <div className=\"layout-main\">\r\n            <div className=\"content-container\">\r\n              <h5>{user.err}</h5>\r\n              <p>Please try again later when the updated scores / teams will be available.</p>\r\n            </div>\r\n          </div> : \r\n          <div className=\"layout-main\">\r\n            <div className=\"content-container\">\r\n              <NoProfilePage />\r\n            </div>\r\n          </div> )\r\n      }\r\n      <div className=\"layout-secondary\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ActiveProfile = ({ user }) => {\r\n  const { fixtures } = useContext(PremierContext);\r\n  const { useGetPick, useLiveData, getPlayerByElement, getTeamById, calculateRoster } = usePremierData();\r\n  const { data: pickData, loading: pickLoading } = useGetPick(user.id, user.current_event);\r\n  const { data: liveData, loading: liveLoading } = useLiveData(user.current_event);\r\n  const [ roster, setRoster ] = useState([]);\r\n  // This should contain all calculated information. In the future, roster, live & teams are obsolete!\r\n  const [ points, setPoints ] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (pickData && liveData) {\r\n      //console.log(\"Stuff loaded...  It's gameweek\", user.current_event);\r\n      loadMyStuff();\r\n    }\r\n  }, [pickData, liveData, user]);\r\n\r\n  const loadMyStuff = () => {\r\n    // Creating own objects\r\n    let smallFixtures = fixtures.filter(f => f.event >= user.current_event && f.event < (user.current_event + 6)); // To optimize, cut old gameweeks from the array.\r\n    let rawTeams = [];  // Save teams codes, to fetch team info later.\r\n    let players = [];   // List of players and their additional info.\r\n    let localTeams = [];     // List of teams and their additional info.\r\n    let countedArr = { points: 0, data: [] };\r\n\r\n    pickData.picks.forEach(p => {\r\n      let player = getPlayerByElement(p.element);\r\n      players.push({ player, ...p });\r\n      /**\r\n       * We could optimize. \r\n       * Check if team is found in object array by its id. \r\n       * If not, search team info and add to array.\r\n       */\r\n      if (!rawTeams.includes(player.team)) rawTeams.push(player.team);\r\n    });\r\n\r\n    rawTeams.forEach(t => {\r\n      let team = getTeamById(t);\r\n      // It's gameweek: user.current_event.\r\n      let matches = smallFixtures.filter(f => f.team_a === team.id || f.team_h === team.id );\r\n      let gameweek = matches.filter(f => f.event === user.current_event); // Not 100% that only 1 match on gameweek!!!\r\n      localTeams.push({ ...team, gameweek });\r\n    });\r\n\r\n    //console.log('Player data:', players);\r\n    //console.log('Raw team data:', rawTeams);\r\n    //console.log('Teams data:', localTeams);\r\n\r\n    countedArr = calculateRoster(pickData.picks, liveData, localTeams);\r\n    setRoster(countedArr.data);\r\n    setPoints(countedArr.points);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"layout-main\">\r\n      <UserInfo user={user} points={points} />\r\n      {!!roster.length && <UserTeam roster={roster} />}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n\r\nconst NoProfilePage = ({ }) => {\r\n  const { searchProfile, recentSearches } = useContext(PremierContext);\r\n  const img_base = \"https://fpl-server.vercel.app/dist/img/shirts/standard/shirt_0\";\r\n  const [ id, setId ] = useState('');\r\n\r\n  return (\r\n    <div className=\"no-profile-wrapper\">\r\n      <div className=\"no-profile-container\">\r\n        <div className=\"search-new-profile\">\r\n          <div className=\"image-cell\">\r\n            <picture>\r\n              <source></source>\r\n              <img\r\n                alt=\"not found\"\r\n                className=\"profile-not-found-image\"\r\n                src={`${img_base}-66.png`}\r\n                srcSet={`${img_base}-66.png 66w, ${img_base}-110.png 110w, ${img_base}-220.png 220w`}\r\n                sizes=\"(min-width: 1024px) 110px, (min-width: 610px) 88px, 55px\"\r\n              ></img>\r\n            </picture>\r\n          </div>\r\n          <div className=\"info-cell\">\r\n            <div>\r\n              <b>No profile selected</b>\r\n            </div>\r\n            <div>\r\n              <small>Please search a profile</small>\r\n            </div>\r\n            <div>\r\n              <SearchUser searchProfile={searchProfile} />\r\n            {/*<InputGroup className=\"mt-3\" size=\"sm\">\r\n                <SearchUser searchProfile={searchProfile} />\r\n                <FormControl \r\n                  placeholder=\"Team ID\"\r\n                  aria-label=\"Team ID\"\r\n                  aria-describedby=\"search-team\"\r\n                  value={id}\r\n                  onChange={onChange}\r\n                />\r\n                <InputGroup.Append>\r\n                  <Button variant=\"outline-success\" onClick={onSearch}>Search</Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>*/}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"search-or\">\r\n          <span>or use recent</span>\r\n        </div>\r\n        <div className=\"select-old-profile\">\r\n          <div className=\"list-old-profile\">\r\n            { recentSearches ? recentSearches.map((r, i) => {\r\n              return (\r\n                <RecentSearch key={i} user={r} />\r\n              )\r\n            }) : null }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Recent searched user\r\n * @param {Object} props \r\n */\r\nconst RecentSearch = ({ user }) => {\r\n  // user: {id, name, owner}\r\n\r\n  // Check if user is default user.\r\n  const { searchProfile, defaultUser, setDefaultUser, removeDefaultUser, removeFromRecents } = useContext(PremierContext);\r\n\r\n  return (\r\n    <div className=\"recent-search-user\">\r\n      <div className=\"recent-search-body\">\r\n        <div className=\"recent-cell-content\" onClick={() => searchProfile(user.id)}>\r\n          <div className=\"recent-cell-default\">{user.id == defaultUser && <i className=\"fas fa-star\" />}</div>\r\n          <div className=\"recent-cell-info\">\r\n            <div className=\"recent-name\"><b>{user.name}</b></div>\r\n            <div className=\"recent-owner\"><small>{user.owner}</small></div>\r\n          </div>\r\n        </div>\r\n        <div className=\"recent-cell-buttons\">\r\n          <div className=\"recent-cell-remove-default\">\r\n              { user.id != defaultUser ? \r\n                <i className=\"far fa-heart\" onClick={() => setDefaultUser(user.id)} /> :\r\n                <i className=\"fas fa-heart\" onClick={() => removeDefaultUser()} />\r\n              }\r\n          </div>\r\n          <div className=\"recent-cell-remove-recent\">\r\n            <i className=\"fas fa-times\" onClick={() => removeFromRecents(user.id)} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n/* Default TAB ELEMENT\r\nimport React from 'react';\r\n\r\nexport default function Profile({ }) {\r\n  //\r\n  return (\r\n    <div className=\"layout-wrapper\">\r\n      <div className=\"layout-main\"></div>\r\n      <div className=\"layout-secondary\"></div>\r\n    </div>\r\n  )\r\n}\r\n*/","C:\\Projects\\fpl-mate\\src\\MainApp\\Fixtures\\index.js",["200","201","202","203","204","205","206","207"],"import React, { useMemo, useState, useEffect } from 'react';\r\nimport { Accordion, Card, ButtonGroup, Button } from 'react-bootstrap';\r\nimport PlayerCard from '../components/ModalPlayer';\r\n\r\nimport usePremierData from '../usePremierData'; \r\n\r\nconst lastIndexOf = (array, key, value) => {\r\n  for (var i = array.length - 1; i >= 0; i--) {\r\n    if (new Date(array[i][key]).getDate() === value) return i;\r\n  }\r\n  return -1;\r\n}\r\n/**\r\n * @param {import('../../PremierContext/premier').Match[]} matches - Gameday matches\r\n */\r\nconst filterGameDays = (matches) => {\r\n  return matches.reduce((result, match, i, arr) => {\r\n    let match_day = new Date(match.kickoff_time).getDate();\r\n    let last_match_otd = lastIndexOf(arr, 'kickoff_time', match_day);\r\n    if (last_match_otd <= i) { // We found the last match\r\n      result.push({\r\n        match_day: match_day,\r\n        day_text: new Date(match.kickoff_time).toDateString(),\r\n        matches: arr.reduce((day, m) => { // add all matches of curr date to the array\r\n          if (new Date(m.kickoff_time).getDate() === match_day) {\r\n            day.push(m);\r\n          }\r\n          return day;\r\n        }, []) \r\n      });\r\n    }\r\n    return result;\r\n  }, []);\r\n}\r\n\r\n/**\r\n * Display season all fixtures.\r\n * Buttons to view previous and next gameweeks.\r\n * !! Remove data fetching on playerlist, and fetch data here -> give same data to every list.\r\n * @param {*} param0 \r\n */\r\nexport default function Fixtures() {\r\n  const { currentGameweek, matches, getGameweek, fetchFixtures } = usePremierData();\r\n  const [ offset, setOffset ] = useState(0);    // Used to offset gameweek from current week.\r\n  const [ player, setPlayer ] = useState(null); // Used to show playercard.\r\n  const [ modal, setModal ] = useState(false);  // Used to handle modal popup.\r\n  const gameweek = getGameweek((currentGameweek.id + offset));\r\n  const kickoffs = useMemo(() => filterGameDays(matches((currentGameweek.id + offset))), [ currentGameweek, matches, offset ]);\r\n  const deadline = new Date(gameweek.deadline_time).toDateString().slice(0, -4); // Remove last 4 digits (year)\r\n  const time = new Date(gameweek.deadline_time).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\r\n  // Fetch new fixtures when offset changes\r\n  const fix = useMemo(async() => await fetchFixtures(), [ offset ]);\r\n\r\n  const showPlayer = (info) => {\r\n    if (!info) return; // Huge issue if we land here!\r\n    setPlayer(info);\r\n    setModal(true);\r\n  }\r\n  useEffect(() => {\r\n    if (offset === 0) {\r\n      const interval = setInterval(async () => {\r\n        await fetchFixtures();\r\n      }, 120000); // 2min\r\n      return () => {\r\n        clearInterval(interval);\r\n      }\r\n    }\r\n    // Do something on render\r\n    return () => {\r\n      // Clear when unmount\r\n    };\r\n  }, [ offset ]);\r\n\r\n  // When switching get fixtures information again -> as it might update scores!\r\n\r\n  return (\r\n    <div className=\"layout-wrapper\">\r\n      {player ? <PlayerCard show={modal} onHide={() => setModal(false)} player={player} /> : null}\r\n      <div className=\"layout-main\">\r\n      <h5 className=\"gameweek-deadline\">{gameweek.name} - {deadline} {time}</h5>\r\n        <div className=\"pager-container\">\r\n          <div className=\"pager-button\">\r\n            <button className=\"arrow-button\" onClick={() => setOffset(offset-1)} disabled={gameweek.is_first}><div><i className=\"fas fa-chevron-left\"></i></div>Previous</button>\r\n          </div>\r\n          <div className=\"pager-button-next\">\r\n            <button className=\"arrow-button\" onClick={() => setOffset(offset+1)} disabled={gameweek.is_last}>Next<div><i className=\"fas fa-chevron-right\"></i></div></button>\r\n          </div>\r\n        </div>\r\n        <br/>\r\n        { kickoffs.map((match_day, i) => {\r\n            return (\r\n              <div key={i} className=\"fixture-day-container\">\r\n                <h4 className=\"fixture-day\">\r\n                  <time dateTime={''}>{match_day.day_text}</time>\r\n                </h4>\r\n                <Accordion className=\"fixture-list\">\r\n                  { match_day.matches.map((k, i) => {\r\n                    return <Match key={i} data={k} number={i} showPlayer={showPlayer} />\r\n                  })}\r\n                </Accordion>\r\n              </div>\r\n            )\r\n          })}\r\n      </div>\r\n      <div className=\"layout-secondary\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Display basic information of a match. \r\n * @param {Object} props\r\n * @param {import('../../PremierContext/premier').Match} props.data - Match Data \r\n */\r\nexport function Match({ data, number, showPlayer }) {\r\n  const { getTeamById, getTeamBadge } = usePremierData();\r\n  const home = getTeamById(data.team_h);\r\n  const away = getTeamById(data.team_a);\r\n  const h_badge = getTeamBadge(home);\r\n  const a_badge = getTeamBadge(away);\r\n\r\n  return (\r\n    <Card>\r\n      <Accordion.Toggle as={Card.Header} eventKey={number.toString()} className=\"match-container\">\r\n        <div className=\"home-team\">\r\n          <span className=\"match-team-name\">{home.name}</span>\r\n          <div className=\"team-badge\">\r\n            <img alt={`badge ${home.name}`} role=\"presentation\" className=\"team-badge-styled\"\r\n              sizes=\"(min-width: 1024px) 40px, 30px\" src={`${h_badge}_40.png`}\r\n              srcSet={`${h_badge}_40.png 40w, ${h_badge}_80.png 80w`}\r\n            />\r\n          </div>\r\n        </div>\r\n        { data.started ? <div className=\"match-score\">\r\n          <span className=\"team-score\">{0 || data.team_h_score}</span>\r\n          <span className=\"team-score\">{0 || data.team_a_score}</span>\r\n          { !data.finished && !data.finished_provisional && \r\n            <div className=\"match-live\">\r\n              <div style={{ backgroundColor: '#01fc7a', padding: '0 .2rem'}}>LIVE</div>\r\n            </div>\r\n          }\r\n        </div> : <span className=\"fixture-time\">{new Date(data.kickoff_time).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})}</span> }\r\n        <div className=\"away-team\">\r\n          <div className=\"team-badge\">\r\n            <img alt={`badge ${away.name}`} role=\"presentation\" className=\"team-badge-styled\"\r\n              sizes=\"(min-width: 1024px) 40px, 30px\" src={`${a_badge}_40.png`}\r\n              srcSet={`${a_badge}_40.png 40w, ${a_badge}_80.png 80w`}\r\n            />\r\n          </div>\r\n          <span className=\"match-team-name\">{away.name}</span>\r\n        </div>\r\n      </Accordion.Toggle>\r\n      <Accordion.Collapse eventKey={number.toString()}>\r\n        <Card.Body className=\"fixture-stats-wrapper\">{data.stats.length ? \r\n        <MatchWrapper data={data} showPlayer={showPlayer} />\r\n         : <p style={{textAlign: 'center', fontSize: 'small'}}>No events yet on the match.</p>}</Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n  )\r\n}\r\nconst LISTTYPE = ['Players', 'Stats'];\r\nexport function MatchWrapper({ data, showPlayer }) {\r\n  const [ selected, setSelected ] = useState(LISTTYPE[0]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"list-type-button-container\">\r\n        <ButtonGroup size=\"sm\" className=\"list-type-buttons\">\r\n          { LISTTYPE.map((type, i) => {\r\n            return <Button variant=\"light\" key={i} active={selected === type} onClick={() => setSelected(type)}>{type}</Button>\r\n          }) }\r\n        </ButtonGroup>\r\n      </div>\r\n      {selected === LISTTYPE[0] ? \r\n        <PlayerList data={data} showPlayer={showPlayer} /> :\r\n        <ul>\r\n          { data.stats.map((stats, i) => {\r\n            return (stats.a.length || stats.h.length ? <MatchStat key={i} stats={stats} showPlayer={showPlayer} /> : null)\r\n          })}\r\n        </ul>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {import('../../PremierContext/premier').MatchStats} props.stats - Current stats of the match \r\n */\r\nexport function MatchStat({ stats, showPlayer }) {\r\n  const { getElementLabel } = usePremierData();\r\n  const label = getElementLabel(stats.identifier);\r\n\r\n  return (\r\n    <li className=\"fixture-stats\">\r\n      <div className=\"fixture-stats-heading\">{label}</div>\r\n      <div className=\"fixture-stats-body\">\r\n        <ul className=\"fixture-stats-list\">\r\n          { stats.h.slice(0,5).map((s, i) => {\r\n            return <PlayerElement key={i} data={s} showPlayer={showPlayer} />\r\n          }) }\r\n        </ul>\r\n        <ul className=\"fixture-stats-list\">\r\n          { stats.a.slice(0,5).map((s, i) => {\r\n            return <PlayerElement key={i} data={s} showPlayer={showPlayer} />\r\n          }) }\r\n        </ul>\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\n/**\r\n * Display players name and made points. When clicked opens playercard.\r\n * @param {Object} props\r\n * @param {Object} props.data\r\n * @param {Object} props.data.element\r\n * @param {String} props.data.value - \r\n */\r\nexport function PlayerElement({ data, showPlayer }) {\r\n  const { getPlayerByElement } = usePremierData();\r\n  const player = getPlayerByElement(data.element);\r\n\r\n  return (\r\n    <li className=\"fixture-stats-item\">\r\n      <button className=\"fixture-stats-element\" onClick={() => showPlayer(player)}>\r\n        {player.web_name} </button> ({data.value})\r\n    </li>\r\n  )\r\n}\r\n\r\nconst getPlayers = (match, live, calculateGame) => {\r\n  if (!live || !live.elements.length) return null;\r\n  let elements = [];\r\n\r\n  // Loop all gamestats, and add element Id's to an array.\r\n  elements = match.stats.reduce((result, i, arr) => {\r\n    // Check i.a && i.h, both are possible arrays of players with point giving attributes.\r\n    let players = i.a.concat(i.h);\r\n    if (players.length) {\r\n      // Getting only players element Id\r\n      let ids = players.map(e => e.element);\r\n      result.push(...ids);\r\n    }\r\n    return result;\r\n  }, []);\r\n\r\n  // Array might contain duplicates, removing them.\r\n  elements = [... new Set(elements)];\r\n\r\n  let calculated_players = calculateGame(elements, live, match);\r\n  return calculated_players;\r\n}\r\n\r\n/**\r\n * CHECK WHEN TO RENDER\r\n * @param {*} param0 \r\n */\r\nexport function PlayerList({ data, showPlayer }) {\r\n  const { currentGameweek, useLiveData, getPointsFromLiveData, calculateGame } = usePremierData();\r\n  const { data: liveData, loading } = useLiveData(currentGameweek.id);\r\n  const players = useMemo(() => getPlayers(data, liveData, calculateGame), [ data, liveData ]);\r\n/*\r\n  useEffect(() => {\r\n    if (loading) console.log('Waiting for live D');\r\n    if (!loading) {\r\n      console.log('Parsed:', players);\r\n      console.log('Live D', liveData);\r\n    }\r\n  }, [ data, loading ]); */\r\n\r\n  return (\r\n    <table className=\"roster-table fixture-players-list\">\r\n      <thead className=\"fixture-table-heading\">\r\n        <tr>\r\n          <th className=\"roster-list-status\">%</th>\r\n          <th className=\"roster-list-element\">\r\n            <div className=\"roster-header-cell\">\r\n              <div className=\"header-cell-container\">Player</div>\r\n              <div className=\"header-cell-container smaller-text\"></div>\r\n            </div>\r\n          </th>\r\n          <th className=\"roster-list-stat\">\r\n            <div className=\"roster-header-cell\">\r\n              <div className=\"header-cell-container cell-small\">Points</div>\r\n              <div className=\"header-cell-container smaller-text\"></div>\r\n            </div>\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {players && players.map((p, i) => {\r\n          return <PlayerCell key={i} data={p} showPlayer={showPlayer} />\r\n        }) }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Object} props.data - Data object\r\n * @param {import('../../PremierContext/premier').Element } props.data.player - Player Element \r\n */\r\nexport function PlayerCell({ data, showPlayer }) {\r\n  const { getTeamShirt, getTeamById } = usePremierData();\r\n  //const player = getPlayerByElement(data.element);\r\n  const shirt = getTeamShirt(data.player);\r\n  const team = getTeamById(data.player.team);\r\n\r\n  return (\r\n    <tr>\r\n      <td className=\"element-cell-pr\">{data.player.selected_by_percent}</td>\r\n      <td className=\"element-cell\">\r\n        <div className=\"element-styled-media\" onClick={() => showPlayer(data.player)}>\r\n          <div className=\"element-media-body\" style={{ paddingLeft: '0.6rem'}}>\r\n            <div className=\"element-body-name\">{data.player.web_name}</div>\r\n            <div className=\"element-body-info\">\r\n              <div className=\"fixture-table-teamname\">\r\n                {team.name}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"element-media-body fixture-table-addinfo\">\r\n            { data.cards.yellow ? \r\n              <div>\r\n               <span className=\"yellow-card\"></span>\r\n              </div> \r\n            : null }\r\n            { data.cards.red ? \r\n              <div>\r\n               <span className=\"red-card\"></span>\r\n              </div> \r\n            : null }\r\n          </div>\r\n        </div>\r\n      </td>\r\n      <td className=\"element-cell-stats\">{data.points.bonus ? <div>{data.points.bonus + data.points.value} <span className=\"player-points-info\">({data.points.value} + {data.points.bonus})</span></div> : data.points.value}</td>\r\n    </tr>\r\n  ) \r\n}","C:\\Projects\\fpl-mate\\src\\MainApp\\Leagues\\index.js",["208","209"],"import React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Button } from 'react-bootstrap';\r\nimport PremierContext from '../../PremierContext';\r\nimport LeagueInfo from '../components/LeagueInfo';\r\nimport ModalTeam from '../components/ModalTeam';\r\nimport usePremierData from '../usePremierData';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {import('../../PremierContext/premier').EntryObject} props.user \r\n */\r\nexport default function Leagues({ user }) {\r\n  const [classic, setClassic] = useState([]);\r\n  const [league, setLeague] = useState({});\r\n  const [modal, setModal] = useState(false);\r\n  const [player, setPlayer] = useState(null);\r\n\r\n  // Set users leagues, remove Gameweek 1 from it.\r\n  useEffect(() => {\r\n    if (user && user.leagues && user.leagues.classic.length) {\r\n      let removed = user.leagues.classic.filter(cl => cl.name !== 'Gameweek 1');\r\n      setClassic(removed);\r\n      setLeague(removed[0]);\r\n    }\r\n    return () => { setClassic([]) }\r\n  }, [ user ]);\r\n\r\n  const showPlayer = (p) => {\r\n    setPlayer(p);\r\n    setModal(true);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {import('../../PremierContext/premier').ClassicObject} league \r\n   */\r\n  const selectLeague = (league) => {\r\n    setLeague(league);\r\n  }\r\n\r\n  //\r\n  return (\r\n    <div className=\"layout-wrapper\">\r\n      <div className=\"layout-main\">\r\n        { player ? <ModalTeam show={modal} onHide={() => setModal(false)} user={player} /> : null }\r\n        <div className=\"league-button-container\">\r\n          <ButtonGroup size=\"sm\" className=\"league-buttons\">\r\n            {classic.map((cl, i) => {\r\n              return <Button variant=\"light\" key={i} active={league.name === cl.name} onClick={() => selectLeague(cl)}>{cl.name} </Button>\r\n            })}\r\n          </ButtonGroup>\r\n        </div>\r\n        {user && league && league.id && <LeagueInfo league={league} preview={showPlayer} user={user} />}\r\n      </div>\r\n      <div className=\"layout-secondary\"></div>\r\n    </div>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\MainApp\\usePremierData.js",["210","211","212","213","214"],"import { useContext, useState, useCallback, useEffect } from 'react';\r\nimport PremierContext from '../PremierContext';\r\n\r\n// https://upmostly.com/tutorials/how-to-use-the-usecontext-hook-in-react\r\nconst usePremierData = () => {\r\n  const context = useContext(PremierContext);\r\n\r\n  /**\r\n   * @returns {import('../PremierContext/premier').Event} Gameweek Object\r\n   */\r\n  function getGameweek(id) {\r\n    let gameweek = context.season.events.find(e => e.id === id);\r\n    // Additional info to elements\r\n    gameweek.is_first = gameweek.id === 1;\r\n    gameweek.is_last = gameweek.id >= context.season.events.length;\r\n    return gameweek;\r\n  }\r\n\r\n  /**\r\n   * @returns {import('../PremierContext/premier').Event} Gameweek Object\r\n   */\r\n  function getCurrentGameweek() {\r\n    return context.season.events.find(e => e.is_current);\r\n  }\r\n\r\n  /**\r\n   * Get all the matches from the given gameweek.\r\n   * @param {Number} gameweek - The mathes of this gameweek\r\n   * @returns {import('../PremierContext/premier').Match[]}\r\n   */\r\n  function getMatches(gameweek) {\r\n    return context.fixtures.filter(f => f.event === gameweek);\r\n  }\r\n  /**\r\n   * Get basic information from given team.\r\n   * @param {Number} id - Team Id \r\n   * @returns {import('../PremierContext/premier').Team} Team Object\r\n   */\r\n  function getTeamById(id) {\r\n    return context.season.teams.find(t => t.id === id);\r\n  }\r\n\r\n  /**\r\n   * Get players basic information of given element Id\r\n   * @param {Number} id - Player element Id \r\n   * @returns {import('../PremierContext/premier').Element}\r\n   */\r\n  function getPlayerByElement(id) {\r\n    return context.season.elements.find(p => p.id === id)\r\n  }\r\n\r\n  /**\r\n   * Get elements label to display to the user\r\n   * @param {String} name - Element name \r\n   * @returns {String} Element label\r\n   */\r\n  function getElementLabel(name) {\r\n    return context.season.element_stats.find(e => e.name === name).label;\r\n  }\r\n  /**\r\n   * Returns teams badge base image url.  \r\n   * **You need to add '_size.png' to the end!**\r\n   * *Example: _40.png*\r\n   * @param {import('../PremierContext/premier').Team} team \r\n   */\r\n  function getTeamBadge (team) {\r\n    if (!team.code) team.code = 0;\r\n    return `https://fpl-server.vercel.app/dist/img/badges/badge_${team.code}`;\r\n  }\r\n\r\n  /**\r\n   * Get players shirt. Check if player has role specific shirt.\r\n   * @param {import('../PremierContext/premier').Element} player \r\n   * @return {String} BaseURL of players shirt, remember to add *-width.png* to the end.  \r\n   * Ex. -66.png *Widths:* **66, 110, 220**\r\n   */\r\n  function getTeamShirt (player) {\r\n    if (!player || !player.team_code) return '';\r\n    let type = context.season.element_types.find(e => e.id === player.element_type);\r\n    return `https://fpl-server.vercel.app/dist/img/shirts/standard/shirt_${player.team_code}${type.ui_shirt_specific ? `_${player.element_type}`: ''}`;\r\n  }\r\n\r\n  /**\r\n   * Return users favourite teams shirt.\r\n   * @param {import('../PremierContext/premier').EntryObject } user\r\n   * @returns {String} \r\n   */\r\n  function getFavouriteShirt (user) {\r\n    if (!user.favourite_team) return '';\r\n    let team_code = context.season.teams.find(e => e.id === user.favourite_team).code;\r\n    return `https://fpl-server.vercel.app/dist/img/shirts/standard/shirt_${team_code}-220.png`;\r\n  }\r\n\r\n  /**\r\n   * Return players picture aka. Mugshot.\r\n   * @param {Number} code \r\n   */\r\n  function getPlayerPicture (code) {\r\n    if (!code) return '';\r\n    // https://fpl-server.vercel.app/photos/players/110x140/pXXXXXXX.png\r\n    return `https://resources.premierleague.com/premierleague/photos/players/110x140/p${code}.png`;\r\n  }\r\n\r\n  /**\r\n   * Get Premier element_type\r\n   * @param {Number} element_type \r\n   * @returns {import('../PremierContext/premier').ElementType}\r\n   */\r\n  function getRole(element_type) {\r\n    return context.season.element_types.find(e => e.id === element_type);\r\n  }\r\n\r\n  /**\r\n   * Get all players that are the type requested\r\n   * @param {Number} type player type\r\n   * @returns {import('../PremierContext/premier').Element[]} Array of players\r\n   */\r\n  function listPlayers(type) {\r\n    return context.season.elements.filter(e => e.element_type === type);\r\n  }\r\n\r\n  /**\r\n   * Check players points from live data. \r\n   * @param {Number} id \r\n   * @param {*} live \r\n   */\r\n  function getPointsFromLiveData(id, live) {\r\n    // No live data provided\r\n    if (!live) return null;\r\n    let player = live.elements.find(e => e.id === id);\r\n\r\n    if (!player) return null;\r\n\r\n    else if (player.explain.length && player.explain[0].stats) {\r\n      return player.explain.map(f => {\r\n        return f.stats.reduce((a, b) => {\r\n          return a + b.points;\r\n        }, 0);\r\n      }).reduce((a, b) => a + b, 0);\r\n    } else return null;\r\n  }\r\n\r\n  /**\r\n   * Get live points of player on specific match.\r\n   * @param {Number} id - Player Id \r\n   * @param {*} live \r\n   */\r\n  function getPointsFromMatch(id, live, match_id) { \r\n    if (!live || !id || !match_id) return null;\r\n\r\n    let player = live.elements.find(e => e.id === id);\r\n\r\n    let match = player.explain.find(e => e.fixture === match_id);\r\n    if (match && player.stats) {\r\n      return match.stats.reduce((a, b) => {\r\n        return a + b.points;\r\n      }, 0);\r\n    } else return null;\r\n  }\r\n\r\n  function getCardsFromMatch(id, match) {\r\n    let cards = { yellow: 0, red: 0 };\r\n    if (!match) return cards;\r\n    // Check if match has started and has stats in it.\r\n    if (match.started || !match.stats) return cards;\r\n    let yellows = match.stats.find(s => s.identifier === 'yellow_cards');\r\n  }\r\n\r\n  function getMatchStats(match) {\r\n    if (!match || !match.started || !match.stats) return null;\r\n    let { a: ag, h: hg } = match.stats.find(s => s.identifier === 'goals_scored');\r\n    let { a: aa, h: ha } = match.stats.find(s => s.identifier === 'assists');\r\n    let { a: aog, h: hog } = match.stats.find(s => s.identifier === 'own_goals');\r\n    let { a: aps, h: hps } = match.stats.find(s => s.identifier === 'penalties_saved');\r\n    let { a: apm, h: hpm } = match.stats.find(s => s.identifier === 'penalties_missed');\r\n    let { a: ayc, h: hyc } = match.stats.find(s => s.identifier === 'yellow_cards');\r\n    let { a: arc, h: hrc } = match.stats.find(s => s.identifier === 'red_cards');\r\n    let { a: as, h: hs } = match.stats.find(s => s.identifier === 'saves');\r\n\r\n    let stats = {\r\n      goals: ag.concat(hg),\r\n      assists: aa.concat(ha),\r\n      own_goals: aog.concat(hog),\r\n      penalties_saved: aps.concat(hps),\r\n      penalties_missed: apm.concat(hpm),\r\n      yellow_cards: ayc.concat(hyc),\r\n      red_cards: arc.concat(hrc),\r\n      saves: as.concat(hs)\r\n    };\r\n\r\n    return stats;\r\n  }\r\n\r\n  /**\r\n   * Gets players possible Bonus points, when match isn't even ended.\r\n   * @param {Number} id - Players ID \r\n   * @param {Object} match \r\n   */\r\n  function getPlayerBonusPoints(id, match) {\r\n    // Player has no matches on the current gameweek.\r\n    if (!match.gameweek) return null;\r\n    let points = 0;\r\n    let remove = 0;\r\n    // Looping every match player has on current gameweek\r\n    match.gameweek.forEach(m => {\r\n      let m_points = 0;\r\n      // Check if match has started and has stats in it. Else leave loop.\r\n      if (!m.started || !m.stats) return;\r\n      // Checking Bonus Points System\r\n      let bps = m.stats.find(s => s.identifier === \"bps\");\r\n      // Adding both teams values to same array, and sorting it as ascending.\r\n      let players = [...bps.a, ...bps.h].sort((a,b) => b.value - a.value);\r\n      // Check if player is in the array, if not just return.\r\n      if (!players.find(i => i.element === id)) return;\r\n\r\n    /**\r\n     * Top 3 only gets points.\r\n     * 1st: 3 points,\r\n     * 2nd: 2 points,\r\n     * 3rd 1 point.\r\n     * \r\n     * If 2 players are 1st, then 2nd gets 1 point.\r\n     * If 2 players are 2nd, then no one gets 1 point.\r\n     */\r\n      let most_points = Math.max.apply(Math, players.map(o => o.value));\r\n      let second_points = Math.max.apply(Math, players.map(o => o.value != most_points ? o.value : null ));\r\n      let third_points = Math.max.apply(Math, players.map(o => o.value != most_points && o.value != second_points ? o.value : null ));\r\n\r\n      let threepoints = players.filter(p => p.value === most_points );\r\n      let twopoints = players.filter(p => p.value === second_points );\r\n      let onepoints = players.filter(p => p.value === third_points );\r\n\r\n      // Give points to top 3 players\r\n      if (threepoints.find(i => i.element === id)) m_points += 3; \r\n      else if (twopoints.find(i => i.element === id)) {\r\n        if (threepoints.length < 2) m_points += 2;      // 1 player was 1st, give 2 points\r\n        else if (threepoints.length < 3) m_points += 1; // 2 players where 1st, give 1 point\r\n      } else if (onepoints.find(i => i.element === id)) {\r\n        // If under 3 players got points, give 1 point.\r\n        if (threepoints.length + twopoints.length < 3) m_points += 1;\r\n      }\r\n      // Add points from this match to ovr_points.\r\n      points += m_points;\r\n      // If match already ended, we need to remove the points from ovr_points to avoid duplicate.\r\n      if (m.finished && m.finished_provisional) remove += m_points;\r\n    });\r\n    return { bonus: points, remove };\r\n  }\r\n  /**\r\n   * Check is players matches have started.\r\n   * @param {*} matches \r\n   */\r\n  function matchesStarted(matches) {\r\n    //matches.gameweek[] -> started: true, show player points, else hide them.\r\n    // might be an array or not. If 1 object contains true, we return true, as there might be double wknds...\r\n    if (!matches || !matches.gameweek) return false;\r\n    let started = matches.gameweek.filter(m => m.started);\r\n    return !!started.length;\r\n  }\r\n  /**\r\n   * Calculates all needed information to players active roster.  \r\n   * Returns object: { points, data }\r\n   * @param {import('../PremierContext/premier').Pick[] } roster \r\n   * @param {import('../PremierContext/premier').Live } live\r\n   * @param {Object} matches - Mathes of current gameweek \r\n   */\r\n  function calculateRoster(roster, live, matches) {\r\n    let data = [\r\n      { name: 'Bench', css:'bench', type: 0, players: [], played: { value: 0, sum: 0, points: 0 } },\r\n      { name: 'Goalkeeper', css:'role-bg1', type: 1, players: [], played: { value: 0, sum: 0, points: 0 } },\r\n      { name: 'Defenders', css:'role-bg2', type: 2, players: [], played: { value: 0, sum: 0, points: 0 } },\r\n      { name: 'Midfielders', css:'role-bg3', type: 3, players: [], played: { value: 0, sum: 0, points: 0 } },\r\n      { name: 'Forwards', css:'role-bg4', type: 4, players: [], played: { value: 0, sum: 0, points: 0 } }\r\n    ];\r\n\r\n    for (let pick of roster) {\r\n      let player = getPlayerByElement(pick.element);\r\n      // Get the right array for the player. If multiplier === 0, player will be on bench.\r\n      let datapath = data[pick.multiplier && player.element_type];\r\n      /**\r\n       * TODO: Needs a fix! \r\n       * If match played today, points won't containt possible bonus points!\r\n       * - Issue: If player played today, it's bonus is calculated on the next day.\r\n       * We could get bonus live, and add it to points. Works before API adds own bps tomorrow.\r\n       * Then we need to remove bonus?\r\n       */\r\n      let games = matches.find(t => t.id === player.team);\r\n      let points = getPointsFromLiveData(player.id, live);\r\n      let { bonus, remove } = getPlayerBonusPoints(player.id, games);\r\n      //console.log(player.web_name, matchesStarted(games)); // games.gameweek[] -> started: true, show player points, else hide them.\r\n      // Player has bonus points and they are added to event points.\r\n      if (bonus && points === player.event_points) {\r\n        if (remove) points = (points - remove);\r\n      }\r\n      // Add player to right array\r\n      datapath.players.push({\r\n        player,\r\n        info: pick,\r\n        started: matchesStarted(games),\r\n        points: {\r\n          value: points * pick.multiplier,\r\n          bonus: bonus * pick.multiplier\r\n        }\r\n      });\r\n      // Update played values\r\n      datapath.played.value += points ? player.now_cost : 0;\r\n      datapath.played.sum += player.now_cost;\r\n      datapath.played.points += bonus ? (bonus+points)*pick.multiplier : points * pick.multiplier;\r\n    };\r\n    /**\r\n     * Literally really risky approach, as it won't count the first object of the array.\r\n     * In this case it shouldn't matter, as the first object is bench, that should have 0 points.\r\n     */\r\n    let points = data.reduce((a, b ) => a + b.played.points, 0);\r\n\r\n    return { points, data };\r\n  }\r\n\r\n  /**\r\n   * Counts points for players of a specific game.\r\n   * @param {Number[]} elements - List of player elements on current match.\r\n   * @param {Object} live  - Live data\r\n   * @param {import('../PremierContext/premier').Match} match - Match data\r\n   */\r\n  function calculateGame(elements, live, match) {\r\n    let players = [];\r\n\r\n    let stats = getMatchStats(match);\r\n\r\n    for (let element of elements) {\r\n      let player = getPlayerByElement(element);\r\n      let points = getPointsFromMatch(player.id, live, match.id);\r\n      let { bonus, remove }= getPlayerBonusPoints(player.id, { gameweek: [match] });\r\n      let cards = { yellow: [], red: []};\r\n\r\n      if (stats) {\r\n        cards.yellow = stats.yellow_cards.find(p => p.element === element);\r\n        cards.red = stats.red_cards.find(p => p.element === element);\r\n      }\r\n\r\n      // Player gained bonus points\r\n      if (bonus && points === player.event_points) {\r\n        // Match is fully ended and points are calculated right to players, thus remove our own calculations.\r\n        if (remove) points = (points - remove);\r\n        //if (match.finished && match.finished_provisional) points = (points - bonus);\r\n      }\r\n      players.push({\r\n        player,\r\n        points: {\r\n          value: points,\r\n          bonus: bonus\r\n        },\r\n        cards: {\r\n          yellow: cards.yellow ? cards.yellow.value : 0,\r\n          red: cards.red ? cards.red.value : 0,\r\n        },\r\n        sort: points + bonus,\r\n      });\r\n    }\r\n    // Sort players by points\r\n\r\n    players.sort((a,b) => b.sort - a.sort);\r\n\r\n    return players;\r\n  }\r\n\r\n  /** CONTEXT ASYNC FUNCTIONS */\r\n\r\n  async function getElementInfo(id) {\r\n    return await context.getPlayerInfo(id);\r\n  }\r\n\r\n  async function fetchFixtures() {\r\n    return await context.GetFixtures();\r\n  }\r\n\r\n  /**\r\n   * @typedef {Object} Roster\r\n   * @property {import('../PremierContext/premier').GameweekRoster} data - The users picks \r\n   * @property {Boolean} loading - Is the request still pending \r\n   */\r\n  /**\r\n   * Gets users picks for the given gameweek.\r\n   * @param {Number} id - Users ID \r\n   * @param {Number} gw - Gameweek\r\n   * @return {Roster}  The picks for the user.\r\n   */\r\n  const useGetPick = (id, gw) => {\r\n    const [ data, setData ] = useState(null);\r\n    const [ loading, setLoading ] = useState(true);\r\n    const fetchData = useCallback(async () => {\r\n      try {\r\n        let picks = await context.getSquad(id, gw);\r\n        setData(picks);\r\n      } catch (error) {\r\n        throw error;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }, [ id, gw ]);\r\n    useEffect(() => {\r\n      fetchData();\r\n    }, [ fetchData ]);\r\n    return { data, loading };\r\n  }\r\n\r\n    /**\r\n   * @typedef {Object} LiveData\r\n   * @property {import('../PremierContext/premier').Live} data - The users picks \r\n   * @property {Boolean} loading - Is the request still pending \r\n   */\r\n  /**\r\n   * Gets live data of given gameweek.\r\n   * @param {Number} gw - Gameweek\r\n   * @return {LiveData}  Live Data.\r\n   */\r\n  const useLiveData = (gw) => {\r\n    const [ data, setData ] = useState(null);\r\n    const [ loading, setLoading ] = useState(true);\r\n    const fetchData = useCallback(async () => {\r\n      try {\r\n        let live = await context.getLiveStats(gw);\r\n        setData(live);\r\n      } catch (error) {\r\n        throw error;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }, [ gw ]);\r\n    useEffect(() => {\r\n      fetchData();\r\n    }, [ fetchData ]);\r\n    return { data, loading };\r\n  }\r\n\r\n  /**\r\n   * @typedef {Object} Roster\r\n   * @property {import('../PremierContext/premier').GameweekRoster} data - The users picks \r\n   * @property {Boolean} loading - Is the request still pending \r\n   */\r\n  /**\r\n   * Gets users picks for the given gameweek.\r\n   * @param {Number} id - Users ID \r\n   * @return {Roster}  The picks for the user.\r\n   */\r\n  const useGetFixtures = (id) => {\r\n    const [ data, setData ] = useState(null);\r\n    const [ loading, setLoading ] = useState(true);\r\n    const fetchData = useCallback(async () => {\r\n      try {\r\n        let fixtures = await context.getPlayerInfo(id);\r\n        setData(fixtures);\r\n      } catch (error) {\r\n        throw error;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }, [ id ]);\r\n    useEffect(() => {\r\n      fetchData();\r\n    }, [ fetchData ]);\r\n    return { data, loading };\r\n  }\r\n\r\n  /**\r\n   * @typedef {Object} Standings\r\n   * @property {import('../PremierContext/premier').LeagueStandings} data - The standings data \r\n   * @property {Boolean} loading - Is the request still pending \r\n   */\r\n  /**\r\n   * Get leagues standings\r\n   * @param {Number} id - league Id \r\n   * @return {Standings}  The picks for the user.\r\n   */\r\n  const useLeagueStandings = (id) => {\r\n    const [ data, setData ] = useState(null);\r\n    const [ loading, setLoading ] = useState(true);\r\n    const fetchData = useCallback(async () => {\r\n      try {\r\n        let standings = await context.getLeagueStandings(id);\r\n        setData(standings);\r\n      } catch (error) {\r\n        throw error;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }, [ id ]);\r\n    useEffect(() => {\r\n      fetchData();\r\n    }, [ fetchData ]);\r\n    return { data, loading };\r\n  }\r\n\r\n  const useUpdateStandings = (id, page) => {\r\n    const [data, setData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const fetch = useCallback(async () => {\r\n      try {\r\n        let standings = await context.updateLeagueStandings(id, page);\r\n        setData(standings);\r\n      } catch (error) { throw error; }\r\n      finally { setLoading(false); }\r\n    }, [ id, page ]);\r\n\r\n    useEffect(() => {\r\n      fetch();\r\n    }, [ fetch ]);\r\n    return { data, loading };\r\n    // https://fantasy.premierleague.com/api/leagues-classic/92/standings/?page_new_entries=1&page_standings=1&phase=1\r\n  }\r\n\r\n  return {\r\n    currentGameweek: getCurrentGameweek(),\r\n    matches: getMatches,\r\n    getGameweek,\r\n    getTeamById,\r\n    getPlayerByElement,\r\n    getElementLabel,\r\n    getTeamBadge,\r\n    getTeamShirt,\r\n    getFavouriteShirt,\r\n    getPlayerPicture,\r\n    getRole,\r\n    getPointsFromLiveData,\r\n    getPlayerBonusPoints,\r\n    listPlayers,\r\n    calculateRoster,\r\n    calculateGame,\r\n    getElementInfo,\r\n    fetchFixtures,\r\n    useGetPick,\r\n    useLiveData,\r\n    useGetFixtures,\r\n    useLeagueStandings,\r\n    useUpdateStandings\r\n  }\r\n}\r\n\r\nexport default usePremierData;","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\SearchUser\\index.js",[],"C:\\Projects\\fpl-mate\\src\\MainApp\\components\\UserTeam\\index.js",["215","216"],"import React, { useEffect, useState } from 'react';\r\nimport usePremierData from '../../usePremierData';\r\nimport PlayerCard from '../PlayerCard';\r\nimport ModalPlayer from '../ModalPlayer';\r\nimport Fixtures   from '../PlayerFixtures';\r\n\r\n/**\r\n * List users current team.\r\n * @param {Object} props\r\n * @param {import('../../../PremierContext/premier').EntryObject} props.team - Users data\r\n */\r\nexport default function UserTeam({ roster }) {\r\n  const [ modal, setModal ] = useState(false);\r\n  const [ info, setInfo ] = useState(null);\r\n\r\n  // Fetch team information\r\n  /*\r\n  useEffect(() => {\r\n    if (pickData) {\r\n      setRoster(pickData.picks);\r\n    }\r\n    // Clean-up\r\n    return () => {\r\n      setRoster([]);\r\n    }\r\n  }, [ pickData ]);\r\n\r\n  // Fetch live data\r\n  useEffect(() => {\r\n    if (liveData) {\r\n      setLive(liveData);\r\n    }\r\n    // Clean-up\r\n    return () => {\r\n      setLive(null);\r\n    }\r\n  }, [ liveData ]);*/\r\n\r\n  const showPlayer = (info) => {\r\n    setInfo(info);\r\n    setModal(true);\r\n  }\r\n\r\n  // If no data, prevent render.\r\n  if ( !roster ) return null;\r\n\r\n  return (\r\n    <div className=\"roster-wrapper\">\r\n      { info ? <ModalPlayer player={info} show={modal} onHide={() => setModal(false)} /> : null }\r\n      {/* info ? <PlayerCard show={modal} onHide={() => setModal(false)} player={info} /> : null */}\r\n      <div className=\"players-container\">\r\n        <div>\r\n          <RosterTable row={roster[1]} showPlayer={showPlayer} />\r\n          <RosterTable row={roster[2]} showPlayer={showPlayer} />\r\n          <RosterTable row={roster[3]} showPlayer={showPlayer} />\r\n          <RosterTable row={roster[4]} showPlayer={showPlayer} />\r\n        </div>\r\n      </div>\r\n      <div className=\"players-container\">\r\n        <div>\r\n          <RosterTable row={roster[0]} showPlayer={showPlayer} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Create Tables with active players on the gameweek.\r\n * @param {Object} props\r\n * @param {import('../../../PremierContext/premier').Pick} props.arr \r\n */\r\nconst RosterTable = ({ showPlayer, row }) => {\r\n\r\n  return (\r\n    <table className=\"roster-table\">\r\n      <thead className={`roster-heading ${row.css}`}>\r\n        <tr>\r\n          <th className=\"roster-list-status\">%</th>\r\n          <th className=\"roster-list-element\">\r\n            <div className=\"roster-header-cell\">\r\n              <div className=\"header-cell-container\">{row.name}</div>\r\n              <div className=\"header-cell-container smaller-text\">Played: £{row.played.value/10}/{row.played.sum/10}</div>\r\n            </div>\r\n          </th>\r\n          <th className=\"roster-list-stat\">\r\n            <div className=\"roster-header-cell\">\r\n              <div className=\"header-cell-container cell-small\">Points</div>\r\n              <div className=\"header-cell-container smaller-text\">{row.played.points}</div>\r\n            </div>\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        { row.players.map((player, i) => {\r\n          return <RosterTableRow key={i} data={player} showPlayer={showPlayer} />\r\n        }) }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\n/**\r\n * Returns string with all set-piece information.\r\n * P = Penalty,\r\n * F = Freekick,\r\n * C = Corner,\r\n * @param {import('../../../PremierContext/premier').Element} player \r\n */\r\nconst setPieceString = (player) => {\r\n  let arr = [];\r\n  if (player.penalties_order) arr.push('P');\r\n  if (player.direct_freeckicks_order) arr.push('F');\r\n  if (player.corners_and_indirect_freekicks_order) arr.push('C');\r\n  if (arr.length) return `( ${arr.join(', ')} )`;\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} props \r\n * @param {Object} props.data\r\n * @param {import('../../../PremierContext/premier').Pick} props.data.info\r\n * @param {import('../../../PremierContext/premier').Element} props.data.player\r\n * @param {import('../../../PremierContext/premier').Live} props.live\r\n */\r\nconst RosterTableRow = ({ data, showPlayer }) => {\r\n\r\n  const { getTeamById, getTeamShirt, useGetFixtures } = usePremierData();\r\n  const { data: fixtureData, loading } = useGetFixtures(data.player.id);\r\n  const team = getTeamById(data.player.team);\r\n  const shirt = getTeamShirt(data.player);\r\n  const [ fixture, setFixture ] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (fixtureData) {\r\n      setFixture(fixtureData);\r\n    }\r\n    return () => {\r\n      setFixture(null);\r\n    }\r\n  }, [ fixtureData ] );\r\n\r\n  return (\r\n    <tr>\r\n      <td className=\"element-cell-pr\">{data.player.selected_by_percent}</td>\r\n      <td className=\"element-cell\">\r\n        <div className=\"element-styled-media\" onClick={() => showPlayer(data.player)}>\r\n          <div className=\"element-media-img\">\r\n            <picture>\r\n              <source></source>\r\n              <img \r\n                alt={team.name}\r\n                className=\"element-media-shirt\" \r\n                src={`${shirt}-66.png`} \r\n                srcSet={`${shirt}-66.png 66w, ${shirt}-110.png 110w, ${shirt}-220.png 220w`}\r\n                sizes=\"24px\"\r\n              ></img>\r\n            </picture>\r\n            <div className={`element-status player-status-${data.player.status}`}></div>\r\n          </div>\r\n          <div className=\"element-media-body\">\r\n            <div className=\"element-body-name\">{data.info.is_captain ? <b>{data.info.multiplier === 3 ? '[3xC]' : '[C]'} </b>: (data.info.is_vice_captain ? <b>[V] </b>:null)}{data.player.web_name} <small>{setPieceString(data.player)}</small></div>\r\n            <div className=\"element-body-info\">\r\n              <Fixtures data={fixture} amount={5} mini />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </td>\r\n      <td className=\"element-cell-stats\">{data.started ? data.points.bonus ? <div>{data.points.bonus + data.points.value} <span className=\"player-points-info\">({data.points.value} + {data.points.bonus})</span></div> : `${data.points.value}` : null}</td>\r\n    </tr>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\UserInfo\\index.js",["217","218"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport usePremierData from '../../usePremierData';\r\nimport PremierContext from '../../../PremierContext';\r\n\r\n/**\r\n * Preview users data\r\n * @param {Object} props\r\n * @param {import('../../../PremierContext/premier').EntryObject} props.user - Current users data \r\n */\r\nexport default function UserInfo({ user, points }) {\r\n  const { season: { total_players } } = useContext(PremierContext);\r\n  const { getFavouriteShirt, currentGameweek, getPlayerByElement } = usePremierData();\r\n  const [ shirt, setShirt ] = useState('');\r\n  const [ rankChange, setRank ] = useState({ num: '0', type: 'neutral' });\r\n  const mostCaptained = getPlayerByElement(currentGameweek.most_captained);\r\n  const rankPosition = gameweekPercent(user, total_players);\r\n\r\n  // Update players favourite teams shirt.\r\n  useEffect(() => {\r\n    if (user) {\r\n      setShirt(getFavouriteShirt(user));\r\n      setRank(userRankChange(user.leagues));\r\n    }\r\n    return () => {\r\n      setShirt(null);\r\n      setRank(null);\r\n    }\r\n  }, [ user ]);\r\n\r\n  return (\r\n    <div className=\"user-info-wrapper\">\r\n      <div className=\"default-container\">\r\n        <div>\r\n          <div>\r\n            <span style={{fontWeight: '700', fontSize: 'x-large'}}>{user.player_first_name} {user.player_last_name} <small>({user.player_region_iso_code_long})</small></span>\r\n          </div>\r\n          <div style={{marginTop: '-0.5rem'}}>\r\n            <p>{user.name} &#183; ({user.summary_overall_points}p)</p>\r\n          </div>\r\n          <div>\r\n            <span>Overall Rank: <b>{user.summary_overall_rank && user.summary_overall_rank.toLocaleString('fin')}</b> <span className={`rank-change-${rankChange.type}`}>{rankChange.num}</span></span>\r\n          </div>\r\n          <div>\r\n            <span><small>GW Rank: <b>{user.summary_event_rank && user.summary_event_rank.toLocaleString('fin')}</b></small></span>\r\n          </div>\r\n        </div>\r\n        <div className=\"team-shirt\">\r\n          <img src={shirt}></img>\r\n        </div>\r\n      </div>\r\n      <div className=\"default-container-transparent\">\r\n        <div className=\"gameweek-wrapper\">\r\n          <div className=\"badge-banner\">\r\n            <div className=\"badge-banner-container\">\r\n              <div className=\"badge-banner-body\">\r\n                <div className=\"gameweek-info-wrapper\">\r\n                  <div className=\"gameweek-info-container\">\r\n                    <div style={{fontWeight: '700'}}>\r\n                      <div><span style={{fontWeight: '700', fontSize: 'small'}}>Average</span></div>\r\n                      <div><span style={{fontWeight: '700'}}>{currentGameweek.average_entry_score}</span></div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"gameweek-info-container\">\r\n                    <div>\r\n                      <div><span style={{fontWeight: '700', fontSize: 'small'}}>Highest</span></div>\r\n                      <div><span style={{fontWeight: '700'}}>{currentGameweek.highest_score || 0}</span></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div><span>{mostCaptained && <small style={{fontSize: 'xx-small'}}>Most Captained: <b>{mostCaptained.web_name}</b></small>}</span></div>\r\n              </div>\r\n              <div className=\"badge-banner-title\">GW {currentGameweek.id}</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"badge-banner\">\r\n            <div className=\"badge-banner-container\">\r\n              <div className=\"badge-banner-body\">\r\n                <div className=\"gameweek-user-points\">{points}</div>\r\n                { rankPosition && <div className=\"gameweek-ranking\">{rankPosition}</div> }\r\n              </div>\r\n              <div className=\"badge-banner-title\">Points</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst userRankChange = (leagues) => {\r\n  let overall = leagues.classic.find(league => league.name === \"Overall\");\r\n  let diff = Math.abs(overall.entry_rank - overall.entry_last_rank).toLocaleString('fin'); // Uses space as thousand delimeter\r\n  let logo = '-';\r\n  let type = 'neutral';\r\n  if (overall.entry_rank < overall.entry_last_rank) { logo = '↑';  type = 'positive' }\r\n  else if (overall.entry_rank > overall.entry_last_rank) { logo = '↓'; type = 'negative' }\r\n  return { num: `${logo}${diff}`, type };\r\n}\r\n\r\nconst gameweekPercent = (user, total_players) => {\r\n  if (!user.summary_event_rank || !total_players) return null;\r\n  else {\r\n    let pos = user.summary_event_rank / total_players*100 < 1 ?         // Is player under 1\r\n    Math.round((user.summary_event_rank / total_players*100)*100)/100 : // Yes, we use 2 decimal accuracy. Ex. 0.53\r\n    Math.round(user.summary_event_rank / total_players*100);            // Nope, we use only 1 decimal accuracy. Ex. 4\r\n    return pos < 50 ? `Top: ${pos}%` : `Bottom: ${100-pos}%`;\r\n  }\r\n}","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\PlayerCard\\index.js",["219","220","221","222","223","224","225"],"import React, { useEffect, useState, useMemo, useCallback } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nimport Fixtures from '../PlayerFixtures';\r\nimport PlayerSuggestions from '../PlayerSuggestion';\r\nimport SuggestionTable from '../PlayerSuggestion/temp';\r\nimport usePremierData from '../../usePremierData'; \r\n\r\nconst useFixture = (player, initialValue) => {\r\n  const { getElementInfo } = usePremierData();\r\n  const [ data, setData ] = useState(initialValue);\r\n  const [ loading, setLoading ] = useState(true);\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      // Fetch fixtures\r\n      let fixtures = await getElementInfo(player.id);\r\n      setData(fixtures);\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [player]);\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [ fetchData ]);\r\n  return { loading, data };\r\n}\r\n\r\n/** \r\n * This is a **MODAL COMPONENT**  \r\n * remeber to pass *show*, *onHide* props  \r\n * Displays player statistics \r\n * @param {Object} props\r\n * @param {import('../../../PremierContext/premier').Element} props.player - Player data \r\n */\r\nexport default function PlayerCard({ show, onHide, player }) {\r\n  const { getPlayerPicture, getTeamById, getRole } = usePremierData();\r\n  const [ fixtures, setFixtures] = useState();\r\n  const [ picture, setPicture ] = useState();\r\n  const [ team, setTeam ] = useState();\r\n  const [ role, setRole ] = useState();\r\n  const { loading, data } = useFixture(player, null);\r\n\r\n  useEffect(() => {\r\n    if (show && player) {\r\n      setPicture(getPlayerPicture(player.code));\r\n      setTeam(getTeamById(player.team));\r\n      setRole(getRole(player.element_type));\r\n    }\r\n    // Clean up\r\n    return () => {\r\n      setPicture(null);\r\n      setTeam(null);\r\n      setRole(null);\r\n    }\r\n  }, [ player, show ]);\r\n\r\n  // Update player fixtures\r\n  useEffect(() => {\r\n    if (data) {\r\n      setFixtures(data);\r\n    }\r\n    // Clean up\r\n    return () => {\r\n      setFixtures(null);\r\n    }\r\n  }, [ data ]);\r\n\r\n  if ( !player || !picture || !team || !role ) return null;\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={onHide}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-center modal-player-info\"\r\n      centered\r\n    >\r\n      <Modal.Header className=\"custom-player-view\" closeButton>\r\n        <Modal.Title id=\"contained-modal-title-center\" className=\"player-banner\">\r\n          <div className={`banner-player-news player-status-${player.status}`}>{player.news}</div>\r\n          <div className=\"banner-player-info pt-3\">\r\n            <div className=\"banner-player-name\">\r\n              <b><small style={{fontWeight: 700}}>{player.first_name} {player.web_name}</small></b>\r\n            </div>\r\n            <div className={`banner-player-role role-bg${player.element_type} pl-2 pr-2 font-italic`}>\r\n              <h5>{role.singular_name}</h5>\r\n            </div>\r\n            <div className=\"banner-player-team\">\r\n              <small>{team.name}</small>\r\n            </div>\r\n            <div className=\"banner-player-stats\">\r\n              <div>\r\n                <small>Value: £<b>{player.now_cost/10}</b> m</small> <br />\r\n                <small>PPG: <b>{player.points_per_game}</b></small> <br />\r\n                <small>PPM: <b>{Math.round(player.total_points / (player.now_cost/10) * 100) / 100}</b></small> <br />\r\n              </div>\r\n            </div>\r\n            <div className=\"banner-fixtures\">\r\n              <Fixtures data={fixtures} amount={6} />\r\n            </div>\r\n          </div>\r\n          <div className=\"banner-player-image\">\r\n            <img src={picture} style={{height: '13rem'}}></img>\r\n          </div>\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>Possible Replacements:</p>\r\n        <SuggestionTable current={player} />\r\n        {/*<PlayerSuggestions current={player} />*/}\r\n      </Modal.Body>\r\n      {/*\r\n      <Modal.Footer>\r\n        <Button onClick={onHide}>Close</Button>\r\n      </Modal.Footer>*/}\r\n    </Modal>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\ModalTeam\\index.js",["226","227","228"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport PremierContext from '../../../PremierContext';\r\nimport usePremierData from '../../usePremierData';\r\n\r\nimport UserTeam from '../UserTeamSmall';\r\n\r\n/**\r\n * Render users current picks.\r\n * @param {Object} props\r\n * @param {import('../../../PremierContext/premier').StandingsPlayer} props.user - User Object \r\n * @param {Boolean} props.show - State if we shold this modal or not\r\n * @param {Function} props.onHide - callback to close the modal\r\n */\r\nexport default function ModalTeam({ user, show, onHide }) {\r\n  const { fixtures } = useContext(PremierContext);\r\n  const { useGetPick, useLiveData, calculateRoster, currentGameweek, getPlayerByElement, getTeamById } = usePremierData();\r\n  const { data: picks, loading: pickLoading } = useGetPick(user.entry, currentGameweek.id);\r\n  const { data: live, loading: liveLoading } = useLiveData(currentGameweek.id);\r\n  const [roster, setRoster] = useState([]);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (picks && live) { \r\n        loadstuff();\r\n      }\r\n    }, [ picks, live, user ]\r\n  )\r\n\r\n  /**\r\n   * LEGACY, THIS SHOULD BE MOVED TO usePremierData()\r\n   */\r\n  const loadstuff = () => {\r\n    // Get all fixture information, and cut it down to next 6 fixtures\r\n    let limitedFixture = fixtures.filter(f => f.event >= currentGameweek.id && f.event < (currentGameweek.id + 6));\r\n    let teamCodes = []; // Save team codes, to fetch team info later.\r\n    let players = []; // List of players and information of them.\r\n    let teams = []; // list of teams and infromation of them.\r\n    let squad = { points: 0, data: [] }; // Save our information of users picks here\r\n\r\n    // Enrich player data and get all team codes on the roster.\r\n    picks.picks.forEach(p => {\r\n      let player = getPlayerByElement(p.element);\r\n      players.push({ player, ...p });\r\n\r\n      if (!teamCodes.includes(player.team)) teamCodes.push(player.team);\r\n    });\r\n\r\n    // Enrich teams data with their upcoming fixtures.\r\n    teamCodes.forEach(t => {\r\n      let team = getTeamById(t);\r\n      let matches = limitedFixture.filter(f => f.team_a === team.id || f.team_h === team.id);\r\n      let gameweek = matches.filter(f => f.event === currentGameweek.id);\r\n      teams.push({ gameweek, ...team });\r\n    });\r\n\r\n    // Finally calulate all needed information to render team.\r\n    squad = calculateRoster(picks.picks, live, teams);\r\n    setRoster(squad.data);\r\n  }\r\n\r\n  // Render the team\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={onHide}\r\n      size=\"md\"\r\n      aria-labelledby=\"contained-modal-title-center\"\r\n      centered\r\n    >\r\n      <Modal.Header className=\"modal-team-header\" closeButton>\r\n        <Modal.Title id=\"modal-team-title-center\" className=\"modal-team-title\" style={{ fontSize: '1rem', fontWeight: 'initial'}}>\r\n          <TeamInfo user={user} roster={roster} />\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body style={{ padding: '0'}}>\r\n        {!!roster.length && <UserTeam roster={roster} />}\r\n      </Modal.Body>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst calcultaValue = (roster) => {\r\n  if (!roster.length) return 0;\r\n  else {\r\n    return Object.values(roster).reduce((t, { played: {sum} }) => t + sum, 0);\r\n  }\r\n}\r\n\r\nconst getCaptain = (roster) => {\r\n  if (!roster.length) return '???';\r\n  else {\r\n    let captain = roster.reduce((result, i) => {\r\n      let check = i.players.filter(p => { return p.info.is_captain } );\r\n      if (check.length) result.push(check[0].player.web_name);\r\n      return result;\r\n    }, []);\r\n    return captain;\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {import('../../../PremierContext/premier').StandingsPlayer} props.user - User Object \r\n */\r\nconst TeamInfo = ({ user, roster }) => {\r\n  const captain = React.useMemo(() => getCaptain(roster), [roster]);\r\n  const teamValue = React.useMemo(() => calcultaValue(roster), [ roster ]);\r\n\r\n  return (\r\n    <div className=\"default-container-transparent\" style={{ borderTopLeftRadius: '.2rem', borderTopRightRadius: '.2rem'}}>\r\n        <div className=\"gameweek-wrapper\">\r\n          <div className=\"badge-banner\">\r\n            <div className=\"badge-banner-container\">\r\n              <div className=\"badge-banner-body\">\r\n                <div className=\"gameweek-info-wrapper\">\r\n                  <div className=\"gameweek-info-container\">\r\n                    <div style={{fontWeight: '700'}}>\r\n                      <div><span style={{fontWeight: '700', fontSize: 'small'}}>Format</span></div>\r\n                      <div><span>{roster && <small style={{fontSize: 'small'}}><b>{!!roster.length && `${roster[2].players.length}-${roster[3].players.length}-${roster[4].players.length}`}</b></small>}</span></div>\r\n                      {/*<div><span style={{fontWeight: '700'}}>{currentGameweek.average_entry_score}</span></div>*/}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"gameweek-info-container\">\r\n                    <div>\r\n                      <div><span style={{fontWeight: '700', fontSize: 'small'}}>Value</span></div>\r\n                      <div><span style={{fontWeight: '700'}}>{teamValue && <small style={{fontSize: 'small'}}><b>{`${teamValue/10}`}</b></small>}</span></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {<div><span>{roster && <small style={{fontSize: 'small'}}>Captain: <b>{captain}</b></small>}</span></div>}\r\n              </div>\r\n              <div className=\"badge-banner-title\" style={{ textOverflow: 'ellipsis', whiteSpace: 'nowrap'}}>{user.player_name}</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"badge-banner\">\r\n            <div className=\"badge-banner-container\">\r\n              <div className=\"badge-banner-body\">\r\n                <div className=\"gameweek-user-points\">{user.event_total}</div>\r\n                <div className=\"gameweek-ranking\">Total: {user.total}</div>\r\n              </div>\r\n              <div className=\"badge-banner-title\">Points</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\LeagueInfo\\index.js",["229","230","231","232"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport usePremierData from '../../usePremierData';\r\nimport PremierContext from '../../../PremierContext';\r\n\r\nimport { useTable, useBlockLayout, useSortBy } from 'react-table';\r\nimport { FixedSizeList } from 'react-window';\r\nimport InfiniteLoader from 'react-window-infinite-loader';\r\n\r\nfunction CustomCell({ value, row: { original } }) {\r\n  return ( \r\n    <>\r\n      <div className=\"league-table-standings-name\" style={{paddingTop: '0.1rem'}}>\r\n        {value}\r\n      </div>\r\n      <div className=\"league-table-standings-team\">{original.entry_name}</div>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction PaddedCell({ value }) {\r\n  return <div className=\"league-table-padded-cell\">{value}</div>\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Number} props.value\r\n * @param {Object} props.row\r\n * @param {import('../../../PremierContext/premier').StandingsPlayer} props.row.original\r\n */\r\nfunction RankCell({ value, row: { original }}) {\r\n  let change = original.last_rank - original.rank;\r\n  /**\r\n   * Values under 100k are displayed as localeString\r\n   * Values over 100k but under 1m are still in localeString but small\r\n   * Values over 1m are small\r\n   */\r\n  return <div className=\"league-table-padded-cell\">\r\n    <div className=\"league-table-rank-cell\">\r\n      <div>{value && value < 1000000 ?  value < 100000 ? value.toLocaleString() : <small>{value.toLocaleString()}</small> : <small>{value}</small>}</div>\r\n      <div>\r\n      {\r\n        change !== 0 ? (change > 0 ? \r\n          <i className=\"fas fa-sort-up\" style={{ color: 'green', verticalAlign: 'middle'}}></i> : \r\n          <i className=\"fas fa-sort-down\" style={{ color: 'red', verticalAlign: 'text-top'}}></i>\r\n          ) : <i className=\"fas fa-minus\" style={{ color: 'gray', fontSize: 'smaller'}}></i>\r\n      }\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n/**\r\n * Render information about given league.\r\n * @param {Object} props\r\n * @param {import('../../../PremierContext/premier').ClassicObject} props.league - league \r\n */\r\nexport default function LeagueInfo({ league, preview, user }) {\r\n  const context = useContext(PremierContext);\r\n  const [ page, setPage ] = useState(1);\r\n  const { useLeagueStandings, useUpdateStandings } = usePremierData();\r\n  //const { data, loading } = useLeagueStandings(league.id);\r\n  const { data: leagueData, loading: loadingData } = useUpdateStandings(league.id, page);\r\n  const [ items, setItems ] = useState([]);\r\n  const [ loading, setLoading] = useState(false);\r\n  const [ has_next, setHasNext] = useState(false);\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Rank',\r\n        accessor:'rank',\r\n        Cell: RankCell\r\n      },\r\n      {\r\n        Header: 'Name',\r\n        accessor: 'player_name',\r\n        Cell: CustomCell\r\n      },\r\n      {\r\n        Header: 'GW',\r\n        accessor: 'event_total',\r\n        Cell: PaddedCell\r\n      },\r\n      {\r\n        Header: 'Points',\r\n        accessor: 'total',\r\n        className: 'points-cell',\r\n        Cell: PaddedCell\r\n      },\r\n    ],\r\n    []\r\n  )\r\n  // Set 1st page of standings\r\n  useEffect(() => {\r\n    if (leagueData && leagueData.standings) {\r\n      setHasNext(leagueData.standings.has_next);\r\n      setItems(leagueData.standings.results);\r\n    }\r\n  }, [ leagueData ]);\r\n\r\n  const loadMore = (startIndex, endIndex) => {\r\n    setLoading(true);\r\n    return new Promise(async(resolve, reject) => {\r\n      try {\r\n        let json = await context.updateLeagueStandings(league.id, (startIndex/50)+1);\r\n        let oldItems = items;\r\n        setItems([...oldItems, ...json.standings.results ]);\r\n        setHasNext(json.standings.has_next);\r\n        resolve(json.standings.results);\r\n      } catch (error) {\r\n        reject(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    })\r\n  }\r\n\r\n  if (!leagueData) return null;\r\n\r\n  return (\r\n    <div className=\"league-info-wrapper\">\r\n      <div className=\"league-basic-info\">\r\n        <div><span>{/*league.name*/}</span></div>\r\n        <div><span>{/*league.id*/}</span></div>\r\n      </div>\r\n      <div className=\"league-standings-wrapper\">\r\n        { !items.length ? \r\n          <div className=\"league-table-container\">\r\n            <p>...</p>\r\n          </div> : \r\n          <Table \r\n            columns={columns} \r\n            data={items} \r\n            preview={preview} \r\n            user={user} \r\n            currentRank={league.entry_rank}\r\n            prevRank={league.entry_last_rank}\r\n            hasNextPage={has_next}\r\n            isNextPageLoading={loading}\r\n            loadNextPage={loadMore}\r\n          />\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {Object} props \r\n * @param {import('../../../PremierContext/premier').EntryObject} props.user - User Object\r\n */\r\nfunction Table({ columns, data, preview, user, currentRank, prevRank, hasNextPage, isNextPageLoading, loadNextPage }) {\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      minWidth: 20,\r\n      width: 0,\r\n      maxWidth: 200,\r\n    }),\r\n    []\r\n  )\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow\r\n  } = useTable(\r\n    { \r\n      columns, \r\n      data,\r\n      defaultColumn\r\n    }, \r\n    useSortBy,\r\n    useBlockLayout\r\n  );\r\n\r\n  const RenderRow = React.useCallback(\r\n    ({ index, style }) => {\r\n      const row = rows[index];\r\n      if (!isItemLoaded(index)) {\r\n        return <div>Loading...</div>\r\n      } else {\r\n        prepareRow(row);\r\n        return (\r\n          <div\r\n            {...row.getRowProps({\r\n              style,\r\n            })}\r\n            className={`tr${row.original.entry === user.id ?' active':''}`}\r\n          >\r\n            {row.cells.map(cell => {\r\n              return (\r\n                <div {...cell.getCellProps()} className=\"td\" onClick={() => preview(cell.row.original)}>\r\n                  {cell.render('Cell')}\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        )\r\n      }\r\n    },\r\n    [prepareRow, rows]\r\n  )\r\n\r\n  // If there are more items to be loaded then add an extra row to hold a loading indicator.\r\n  const itemCount = hasNextPage ? rows.length + 1 : rows.length;\r\n\r\n  // Only load 1 page of items at a time.\r\n  // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.\r\n  const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage;\r\n\r\n  // Every row is loaded except for our loading indicator row.\r\n  const isItemLoaded = index => !hasNextPage || index < rows.length;\r\n\r\n  // Render the UI for the table\r\n  return (\r\n    <div className=\"league-table-container\">\r\n      <div {...getTableProps()} className=\"table\">\r\n          {headerGroups.map(headerGroup => (\r\n            <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n              {headerGroup.headers.map(column => (\r\n                // Add the sorting props to control sorting. For this example\r\n                // we can add them into the header props\r\n                <div {...column.getHeaderProps(column.getSortByToggleProps())} className=\"th\">\r\n                  {column.render('Header')}\r\n                  {/* Add a sort direction indicator */}\r\n                  <span>\r\n                    {column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? ' 🔽'\r\n                        : ' 🔼'\r\n                      : ''}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        <div {...getTableBodyProps()}>\r\n          <InfiniteLoader\r\n            isItemLoaded={isItemLoaded}\r\n            itemCount={itemCount}\r\n            loadMoreItems={loadMoreItems} \r\n          >\r\n            {({ onItemsRendered, ref }) => (\r\n              <FixedSizeList\r\n                height={rows.length < 8 ? rows.length*35.5 : 280}\r\n                itemCount={itemCount}\r\n                onItemsRendered={onItemsRendered}\r\n                ref={ref}\r\n                itemSize={35}\r\n                width={'100%'}          \r\n              >\r\n                {RenderRow}\r\n              </FixedSizeList>\r\n            )}\r\n          </InfiniteLoader>\r\n          <div \r\n            role=\"row\" \r\n            className=\"tr active\" \r\n            style={{display: 'flex', height: '35px', border: '1px #000 solid', marginTop: '0.1rem'}}\r\n            onClick={() => preview({ \r\n              entry: user.id, \r\n              player_name: `${user.player_first_name} ${user.player_last_name}`, \r\n              event_total: user.summary_event_points,\r\n              total: user.summary_overall_points\r\n            }) }\r\n          >\r\n            <div role=\"cell\" className=\"td\"><RankCell value={currentRank} row={{original: { last_rank: prevRank, rank: currentRank }}} /></div>\r\n            <div role=\"cell\" className=\"td\"><CustomCell value={`${user.player_first_name} ${user.player_last_name}`} row={{original: {entry_name: user.name}}}/></div>\r\n            <div role=\"cell\" className=\"td\"><PaddedCell value={user.summary_event_points} /></div>\r\n            <div role=\"cell\" className=\"td\"><PaddedCell value={user.summary_overall_points} /></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\PlayerSuggestion\\temp.js",["233","234","235","236","237","238"],"import React, { useCallback, useEffect, useState, useFixture } from 'react';\r\nimport Datatable from 'react-bs-datatable';\r\n\r\nimport Fixtures from '../PlayerFixtures';\r\n\r\nimport {\r\n  Pagination,\r\n  PaginationOpts,\r\n  TableHeader,\r\n  TableBody,\r\n  Filter,\r\n  useDatatableLifecycle,\r\n  shouldTableUpdate\r\n} from 'react-bs-datatable';\r\nimport { makeClasses } from 'react-bs-datatable/lib/helpers/object';\r\nimport usePremierData from '../../usePremierData';\r\n\r\nconst customLabels = {\r\n  first: '<<',\r\n  last: '>>',\r\n  prev: '<',\r\n  next: '>',\r\n  noResults: 'Whoops, something when wrong.'\r\n};\r\n\r\nconst classes = {\r\n  //paginationCol: 'player-suggestion-pagination',\r\n  table: 'element-suggestion-table',\r\n  theadRow: 'element-table-heading',\r\n  theadCol: 'element-table-heading-col',\r\n  tbodyRow: 'element-table-row',\r\n  tbodyCol: 'element-table-col',\r\n  controlRow: 'element-table-control',\r\n  paginationCol: 'element-table-pagination',\r\n  paginationButton: 'element-table-button'\r\n};\r\n\r\nconst CustomTable = React.memo(props => {\r\n  const {\r\n    data,\r\n    rowsPerPageOption,\r\n    tableHeaders,\r\n    onChangeFilter,\r\n    onPageNavigate,\r\n    classes,\r\n    onRowsPerPageChange,\r\n    onSortChange,\r\n    tableClass,\r\n    labels,\r\n    filterable,\r\n    filterText,\r\n    rowsPerPage,\r\n    currentPage,\r\n    sortedProp,\r\n    maxPage,\r\n    Components\r\n  } = useDatatableLifecycle(props);\r\n\r\n  return (\r\n    <>\r\n      <Components.Row className=\"controlRow__root\">\r\n        <Components.Col xs=\"12\">\r\n          <Filter\r\n            classes={classes}\r\n            tableHeaders={tableHeaders}\r\n            placeholder={labels.filterPlaceholder}\r\n            onChangeFilter={onChangeFilter}\r\n            filterText={filterText}\r\n            filterable={filterable}\r\n            components={{\r\n              Adornment: Components.Adornment,\r\n              Button: Components.Button,\r\n              ClearIcon: Components.ClearIcon,\r\n              FormControl: Components.FormControl,\r\n              InputGroup: Components.InputGroup\r\n            }}\r\n          />\r\n        </Components.Col>\r\n      </Components.Row>\r\n      <Components.Row>\r\n        <Components.Col xs=\"12\">\r\n          <Components.Table className={tableClass}>\r\n            <TableHeader\r\n              classes={classes}\r\n              tableHeaders={tableHeaders}\r\n              sortedProp={sortedProp}\r\n              onSortChange={onSortChange}\r\n              components={{\r\n                TableHead: Components.TableHead,\r\n                TableCell: Components.TableCell,\r\n                TableRow: Components.TableRow\r\n              }}\r\n            />\r\n            <TableBody\r\n              classes={classes}\r\n              tableHeaders={tableHeaders}\r\n              labels={labels}\r\n              data={data}\r\n              components={{\r\n                TableBody: Components.TableBody,\r\n                TableCell: Components.TableCell,\r\n                TableRow: Components.TableRow\r\n              }}\r\n            />\r\n          </Components.Table>\r\n        </Components.Col>\r\n      </Components.Row>\r\n      <Components.Row className=\"controlRow__root bottom\">\r\n        <Components.Col xs={12} md={4} />\r\n        <Components.Col xs={12} md={4}>\r\n          <PaginationOpts\r\n            classes={classes}\r\n            labels={labels}\r\n            onRowsPerPageChange={onRowsPerPageChange}\r\n            rowsPerPage={rowsPerPage}\r\n            rowsPerPageOption={rowsPerPageOption}\r\n            components={{\r\n              Form: Components.Form,\r\n              FormGroup: Components.FormGroup,\r\n              FormControl: Components.FormControl\r\n            }}\r\n          />\r\n        </Components.Col>\r\n        <Components.Col xs={12} md={4} className=\"text-right element-table-pagination\">\r\n          <Pagination\r\n            classes={classes}\r\n            data={data}\r\n            rowsPerPage={rowsPerPage}\r\n            currentPage={currentPage}\r\n            onPageNavigate={onPageNavigate}\r\n            labels={labels}\r\n            maxPage={maxPage}\r\n            components={{\r\n              Button: Components.Button,\r\n              ButtonGroup: Components.ButtonGroup\r\n            }}\r\n          />\r\n        </Components.Col>\r\n      </Components.Row>\r\n    </>\r\n  );\r\n}, shouldTableUpdate);\r\n\r\nconst tableHeaders = [\r\n  { prop: 'total_points', title: 'Points', sortable: true,\r\n    headerCell: (icon, sortedProp) => {\r\n      // icon is the actual icon.\r\n      // sortedProp is the currently sortedProp\r\n      return (\r\n        <>\r\n          {`P`}\r\n          <span className=\"element-list-status\"><small>{icon}</small></span>\r\n        </>\r\n      )\r\n    }\r\n  },\r\n  { prop: 'short_name', title: 'Team', cell: row => {\r\n    return <TeamColumn player={row} />\r\n  }, sortable: true },\r\n  { prop: 'web_name', title: 'Player', cell: row => {\r\n    return (\r\n      <PlayerColumn player={row} />\r\n    )\r\n  }, sortable: true },\r\n  { prop: 'now_cost', title: '£', cell: row => row.now_cost/10, sortable: true },\r\n  { prop: 'ict_index_rank', title: 'ICT', sortable: true },\r\n  { prop: 'ppm', title: 'PPM', sortable: true }\r\n];\r\n\r\n//const { getTeamById } = usePremierData();\r\n\r\nconst onSortFunction = {\r\n  total_points(value) {\r\n    return value;\r\n  },\r\n  team: (value) => {\r\n    return value;\r\n  },\r\n  web_name: (value) => {\r\n    // Basic sort will check for upper & lowerCase\r\n    return value.toUpperCase();\r\n  },\r\n  ict_index_rank(value) {\r\n    return parseFloat(value);\r\n  },\r\n  ppm(value) {\r\n    return value;\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {import('../../../PremierContext/premier').Element} props.current - Current player \r\n */\r\nexport default function SuggestionTable({ current }) {\r\n  const { listPlayers, getTeamById } = usePremierData();\r\n  const [ list, setList ] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (current && current.element_type) {\r\n      let player_list = listPlayers(current.element_type);\r\n      // Enrich information to the elements.\r\n      // For sorting purposes, get team short_name\r\n      let enriched = player_list.map(p => { return {\r\n        ...p, \r\n        short_name: getTeamById(p.team).short_name,\r\n        ppm: Math.round(p.total_points / (p.now_cost/10) * 100) / 100\r\n      } });\r\n      // Datatable starting sort is wack, fix it here.\r\n      enriched.sort((a,b) => b.total_points - a.total_points);\r\n      setList(enriched);\r\n      console.log(enriched);\r\n    };\r\n    return () => setList([]);\r\n  }, [ current ]);\r\n\r\n  return (\r\n    <CustomTable \r\n      tableHeaders={tableHeaders} \r\n      tableBody={list}\r\n      rowsPerPage={5}\r\n      //initialSort={{ prop: 'ict_index', isAscending: false }} \r\n      onSort={onSortFunction} \r\n      labels={customLabels}\r\n      classes={classes}\r\n      Components={{\r\n        ButtonGroup(props) {\r\n          let child = props.children.find(c => c.key.includes(\"page-btn\") && c.props.disabled );\r\n          let pageNum = child ? child.props.pageNumber : 0;\r\n          return (\r\n            <>\r\n            <div\r\n              {...props}\r\n              className={makeClasses(props.className, classes.buttonGroup)}\r\n            />\r\n            <span><small>{pageNum <= 1 ? '1' : (pageNum-1)*5+1} - {pageNum*5 > list.length ? list.length : pageNum*5}/{list.length}</small></span>\r\n            </>\r\n          );\r\n        },\r\n        Button(props) {\r\n          let hidden = !['>','<'].includes(props.children);\r\n          if (hidden) return null;\r\n          return (\r\n            <button {...props} className={makeClasses(hidden, props.className, classes.paginationButton)}>\r\n              <i className={`fas fa-angle-${['<'].includes(props.children) ? 'left': 'right'}`}></i>\r\n            </button>\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nconst TeamColumn = ({ player }) => {\r\n  const { getTeamShirt } = usePremierData();\r\n  const shirt = getTeamShirt(player);\r\n\r\n  return (\r\n    <div className=\"element-cell\">\r\n      <div className=\"element-styled-media\">\r\n        <div className=\"element-media-img\">\r\n          <picture>\r\n            <source></source>\r\n            <img \r\n              alt={'?'}\r\n              className=\"element-media-shirt\" \r\n              src={`${shirt}-66.png`} \r\n              srcSet={`${shirt}-66.png 66w, ${shirt}-110.png 110w, ${shirt}-220.png 220w`}\r\n              sizes=\"24px\"\r\n            ></img>\r\n          </picture>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst PlayerColumn = ({ player, current }) => {\r\n  const { useGetFixtures } = usePremierData();\r\n  const [ fixtures, setFixtures ] = useState(null);\r\n  const { data, loading } = useGetFixtures(player.id);\r\n\r\n  // Set player fixtures\r\n  useEffect(() => {\r\n    if (data) {\r\n      setFixtures(data);\r\n    }\r\n    return () => {\r\n      setFixtures(null);\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"element-cell\">\r\n      <div className=\"element-styled-media\">\r\n        <div className=\"element-media-body\">\r\n          <div className=\"element-body-name\">{player.web_name}</div>\r\n          <div className=\"element-body-info\">\r\n            <Fixtures data={fixtures} amount={5} mini />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Suggestion({ player, current }) {\r\n  const { getTeamById, getTeamShirt } = usePremierData();\r\n  const [ fixtures, setFixtures ] = useState(null);\r\n  const team = getTeamById(player.team);\r\n  const shirt = getTeamShirt(player);\r\n  const { data, loading } = useFixture(player);\r\n\r\n  // Set player fixtures\r\n  useEffect(() => {\r\n    if (data) {\r\n      setFixtures(data);\r\n    }\r\n    return () => {\r\n      setFixtures(null);\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <tr className=\"element-suggestion-row\">\r\n      <td className=\"element-cell-stats\">{player.total_points}</td>\r\n      <td className=\"element-cell\">\r\n        <div className=\"element-styled-media\">\r\n          <div className=\"element-media-img\">\r\n            <picture>\r\n              <source></source>\r\n              <img \r\n                alt={team.name}\r\n                className=\"element-media-shirt\" \r\n                src={`${shirt}-66.png`} \r\n                srcSet={`${shirt}-66.png 66w, ${shirt}-110.png 110w, ${shirt}-220.png 220w`}\r\n                sizes=\"24px\"\r\n              ></img>\r\n            </picture>\r\n          </div>\r\n          <div className=\"element-media-body\">\r\n            <div className=\"element-body-name\">{player.web_name}</div>\r\n            <div className=\"element-body-info\">\r\n              <Fixtures data={fixtures} amount={5} mini />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </td>\r\n      <td className=\"element-cell-stats\">{player.now_cost/10} <small>( {(player.now_cost - current.now_cost)/10} )</small></td>\r\n      <td className=\"element-cell-stats\">{Math.round(player.total_points / (player.now_cost/10) * 100) / 100}</td>\r\n      {/*<small>{player.web_name}</small> | <small>PPG: {player.points_per_game}</small> | <small>Value: {player.now_cost/10}</small> | <small>PPM: {Math.round(player.total_points / (player.now_cost/10) * 100) / 100}</small> | <small>Points: {player.total_points}</small>*/}\r\n    </tr>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\PlayerSuggestion\\index.js",["239","240","241","242","243","244","245"],"import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Tab, Badge, Nav, Pagination } from 'react-bootstrap';\r\nimport Datatable from 'react-bs-datatable';\r\nimport Fixtures from '../PlayerFixtures';\r\n\r\nimport usePremierData from '../../usePremierData';\r\nconst FILTER_RANGE = 0.5; // value in millions\r\n\r\nconst initialFilters = [\r\n  { name: \"value\", label: \"Value\", field: \"now_cost\", data: [], asc: false, scale: true },\r\n  { name: \"ppg\", label: \"PPG\", field: \"points_per_game\", data: [], asc: false, scale: true },\r\n  { name: \"ict\", label: \"ICT\", field: \"ict_index_rank\", data: [], asc: true, scale: true },\r\n  //{ name: \"form\", label: \"Form\", field: \"value_form\", data: [], asc: false },\r\n  { name: \"season\", label: \"Budget\", field: \"value_season\", data: [], asc: false, scale: true },\r\n  //{ name: \"ppv\", label: \"PPV\", field: \"value_season\", data: [], asc: false, func: ppv}\r\n];\r\nconst fillData = (arr) => {\r\n  initialFilters.forEach(f => {\r\n    f.data = [...arr].sort((a, b) => {\r\n      if (f.func) {\r\n        return f.asc ? f.func(a) - f.func(b) : f.func(b) - f.func(a)\r\n      } else return f.asc ? a[f.field] - b[f.field] : b[f.field] - a[f.field]\r\n    });\r\n    // Custom edits on data arrays\r\n    if (f.name === \"ppg\") { \r\n      // Remove entries that have under 5 games played.\r\n      // Better would be to compare players on the team and check played minutes\r\n      f.data.filter(d => d.minutes > 200);\r\n    }\r\n  });\r\n  return initialFilters;\r\n}\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {import('../../../PremierContext/premier').Element} props.current - Currently selected player \r\n */\r\nexport default function SuggestionContainer({ current }) {\r\n  const { listPlayers } = usePremierData();\r\n  const [ list, setList ] = useState(listPlayers(current.element_type));\r\n  const [ filtered, setFiltered] = useState([]);\r\n  const [ filter, setFilter ] = useState(0);\r\n  const [ filters, setFilters] = useState(initialFilters);\r\n  /** PAGINATION */\r\n  const [ active, setActive ] = useState(1);\r\n  let items = [];\r\n\r\n  const changePage = (number) => {\r\n    setActive(number);\r\n  }\r\n\r\n  for (let number = 1; number <=5; number++) {\r\n    items.push(\r\n      <Pagination.Item key={number} active={number === active} onClick={() => changePage(number)}>\r\n        {number}\r\n      </Pagination.Item>\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(`Creating suggestions for ${current.web_name}`);\r\n    let player_list = listPlayers(current.element_type);\r\n    setFilters(fillData(player_list));\r\n    // Naive sort, getting the expensives\r\n    // player_list.sort((a,b) => b.now_cost - a.now_cost);\r\n    // player_list.sort((a,b) => b.points_per_game - a.points_per_game);\r\n    setList(player_list);\r\n    return () => {\r\n      setList(null);\r\n    }\r\n  }, [ current ]);\r\n\r\n  // When filter is changed, edit list\r\n  useEffect(() => {\r\n    let newList = list;\r\n    newList.sort((a, b) => b[filters[filter].field] - a[filters[filter].field]);\r\n    setFiltered(newList);\r\n    return () => {\r\n      setFiltered(null);\r\n    }\r\n  }, [ filter ]);\r\n\r\n  useEffect(() => {\r\n    console.log('useEffect on number change!');\r\n  }, [ active ]);\r\n\r\n  const changeFilter = (num) => {\r\n    setFilter(num);\r\n  }\r\n  // If we have a null props, don't render!\r\n  if (!current || !list) return null;\r\n\r\n  return (\r\n    <div className=\"suggestion-wrapper\">\r\n      <Tab.Container id=\"suggestion-tabs\" defaultActiveKey={initialFilters[0].name}>\r\n        <Nav className=\"nav-tabs\">\r\n          {filters.map((f, i) => {\r\n            return (\r\n              <Nav.Item key={i}>\r\n                <Nav.Link eventKey={f.name}>{f.label}</Nav.Link>\r\n              </Nav.Item>\r\n            )\r\n          })}\r\n        </Nav>\r\n        <Tab.Content>\r\n          { filters.map((f, i) => {\r\n            \r\n            let arr = f.scale ? f.data.filter(p => {\r\n              //Math.abs(p.now_cost-current.now_cost) < 10 \r\n              return ((current.now_cost - p.now_cost) > (FILTER_RANGE*10) || (p.now_cost - current.now_cost) < (FILTER_RANGE*10))\r\n            }).slice(((active-1)*5), (active*5)) : f.data.slice(0, 10);\r\n            return (\r\n              <Tab.Pane eventKey={f.name} key={i}>\r\n                <div className=\"suggestions-container\">\r\n                  <table className=\"element-suggestion-table\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th className=\"element-list-status\">Points</th>\r\n                        <th className=\"element-list-element\">Player</th>\r\n                        <th className=\"element-list-price\">£</th>\r\n                        <th className=\"element-list-stat\">PPM</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    { arr.map((p, i) => { \r\n                      return <Suggestion key={i} player={p} current={current} />\r\n                    }) }\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                <div className=\"pagination-container\">\r\n                  <Pagination>{items}</Pagination>\r\n                </div>\r\n              </Tab.Pane>\r\n            )\r\n          })}\r\n        </Tab.Content>\r\n      </Tab.Container>\r\n      <p>Players found: {filtered.length}</p>\r\n      {/* LIST SUGGESTIONS */}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst useFixture = ( player ) => {\r\n  const { getElementInfo } = usePremierData();\r\n  const [ data, setData ] = useState(null);\r\n  const [ loading, setLoading ] = useState(true);\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      let fixtures = await getElementInfo(player.id);\r\n      setData(fixtures);\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [player]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  return { data, loading };\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {import('../../../PremierContext/premier').Element} props.player - Suggested player \r\n * @param {import('../../../PremierContext/premier').Element} props.current - Current player \r\n */\r\nfunction Suggestion({ player, current }) {\r\n  const { getTeamById, getTeamShirt } = usePremierData();\r\n  const [ fixtures, setFixtures ] = useState(null);\r\n  const team = getTeamById(player.team);\r\n  const shirt = getTeamShirt(player);\r\n  const { data, loading } = useFixture(player);\r\n\r\n  // Set player fixtures\r\n  useEffect(() => {\r\n    if (data) {\r\n      setFixtures(data);\r\n    }\r\n    return () => {\r\n      setFixtures(null);\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <tr className=\"element-suggestion-row\">\r\n      <td className=\"element-cell-stats\">{player.total_points}</td>\r\n      <td className=\"element-cell\">\r\n        <div className=\"element-styled-media\">\r\n          <div className=\"element-media-img\">\r\n            <picture>\r\n              <source></source>\r\n              <img \r\n                alt={team.name}\r\n                className=\"element-media-shirt\" \r\n                src={`${shirt}-66.png`} \r\n                srcSet={`${shirt}-66.png 66w, ${shirt}-110.png 110w, ${shirt}-220.png 220w`}\r\n                sizes=\"24px\"\r\n              ></img>\r\n            </picture>\r\n          </div>\r\n          <div className=\"element-media-body\">\r\n            <div className=\"element-body-name\">{player.web_name}</div>\r\n            <div className=\"element-body-info\">\r\n              <Fixtures data={fixtures} amount={5} mini />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </td>\r\n      <td className=\"element-cell-stats\">{player.now_cost/10} <small>( {(player.now_cost - current.now_cost)/10} )</small></td>\r\n      <td className=\"element-cell-stats\">{Math.round(player.total_points / (player.now_cost/10) * 100) / 100}</td>\r\n      {/*<small>{player.web_name}</small> | <small>PPG: {player.points_per_game}</small> | <small>Value: {player.now_cost/10}</small> | <small>PPM: {Math.round(player.total_points / (player.now_cost/10) * 100) / 100}</small> | <small>Points: {player.total_points}</small>*/}\r\n    </tr>\r\n  )\r\n}\r\n\r\n/**\r\n * Give trade suggestions to the player.\r\n * @param {Object} props\r\n * @param {import('../../../PremierContext/premier').Element} props.current - Currently selected player\r\n */\r\nexport const SuggestionTable = ({ current }) => {\r\n  const { listPlayers } = usePremierData();\r\n  const [ list, setList ] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (current && current.element_type) {\r\n      let player_list = listPlayers(current.element_type);\r\n      setList(player_list);\r\n      console.log(list);\r\n    }\r\n    return () => setList([]);\r\n  }, [ current ]);\r\n  /**\r\n   * Get currently available amount of cash, filter only players that are affordable.\r\n   */\r\n\r\n  return (\r\n    <Datatable tableHeaders={[]} tableBody={[]} />\r\n  )\r\n}",["246","247"],"C:\\Projects\\fpl-mate\\src\\MainApp\\components\\UserTeamSmall\\index.js",["248","249","250","251","252","253","254"],"import React, { useEffect, useState } from 'react';\r\nimport { Accordion, Card } from 'react-bootstrap';\r\nimport usePremierData from '../../usePremierData';\r\nimport PlayerCard from '../ModalPlayer';\r\nimport Fixtures   from '../PlayerFixtures';\r\n\r\n/**\r\n * Returns string with all set-piece information.\r\n * P = Penalty,\r\n * F = Freekick,\r\n * C = Corner,\r\n * @param {import('../../../PremierContext/premier').Element} player \r\n */\r\nconst setPieceString = (player) => {\r\n  let arr = [];\r\n  if (player.penalties_order) arr.push('P');\r\n  if (player.direct_freeckicks_order) arr.push('F');\r\n  if (player.corners_and_indirect_freekicks_order) arr.push('C');\r\n  if (arr.length) return `( ${arr.join(', ')} )`;\r\n}\r\n\r\nexport default function TeamContainer({ roster }) {\r\n    const [ modal, setModal ] = useState(false);\r\n    const [ info, setInfo ] = useState(null);\r\n\r\n    // If no data, prevent render.\r\n    if ( !roster ) return null;\r\n\r\n    const showPlayer = (info) => {\r\n      setInfo(info);\r\n      setModal(true);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        { info ? <PlayerCard show={modal} onHide={() => setModal(false)} player={info} /> : null }\r\n        <div >\r\n          <div style={{ paddingTop: '1rem', paddingBottom: '1rem'}}>\r\n            <RosterCard row={roster[1]} show={showPlayer} />\r\n            <RosterCard row={roster[2]} show={showPlayer} />\r\n            <RosterCard row={roster[3]} show={showPlayer} />\r\n            <RosterCard row={roster[4]} show={showPlayer} />\r\n            <br />\r\n            <RosterCard row={roster[0]} show={showPlayer} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nconst RosterCard = ({ row, show }) => {\r\n  return (\r\n    <Accordion>\r\n    <Card>\r\n      <Accordion.Toggle as={Card.Header} eventKey={row.name} className=\"team-row-container\">\r\n        <div className={`roster-heading ${row.css}`}>\r\n        <div style={{ display: 'flex'}}>\r\n          <div className=\"roster-list-status\" role=\"th\">%</div>\r\n          <div className=\"roster-list-element\" role=\"th\">\r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n              <div>\r\n                <div className=\"header-cell-container\">{row.name}</div>\r\n                <div className=\"header-cell-container smaller-text\">Played: £{row.played.value/10}/{row.played.sum/10}</div>\r\n              </div>\r\n              <div style={{ marginRight: '2rem', paddingTop: '.4rem'}}>\r\n                <div className=\"header-cell-container\">Show more</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"roster-list-stat\" role=\"th\">\r\n            <div>\r\n              <div className=\"header-cell-container cell-small\">Points</div>\r\n              <div className=\"header-cell-container smaller-text\">{row.played.points}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </Accordion.Toggle>\r\n      <Accordion.Collapse eventKey={row.name}>\r\n        <Card.Body className=\"team-row-container\">\r\n          { row.players.map((p, i) => {\r\n            return <RosterPlayer key={i} data={p} show={show} />\r\n          })}\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n    </Accordion>\r\n  )\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} props \r\n * @param {Object} props.data\r\n * @param {import('../../../PremierContext/premier').Pick} props.data.info\r\n * @param {import('../../../PremierContext/premier').Element} props.data.player\r\n * @param {import('../../../PremierContext/premier').Live} props.live\r\n */\r\nconst RosterPlayer = ({ data, show }) => {\r\n  const { getTeamById, getTeamShirt, useGetFixtures } = usePremierData();\r\n  const { data: fixtureData, loading } = useGetFixtures(data.player.id);\r\n  const team = getTeamById(data.player.team);\r\n  const shirt = getTeamShirt(data.player);\r\n  const [ fixture, setFixture ] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (fixtureData) {\r\n      setFixture(fixtureData);\r\n    }\r\n    return () => {\r\n      setFixture(null);\r\n    }\r\n  }, [ fixtureData ] );\r\n\r\n  return (\r\n    <div style={{ display: 'flex', borderBottom: '1px solid rgb(239, 239, 239)' }}>\r\n      <div role=\"td\" className=\"team-row-cell-pr\">{data.player.selected_by_percent}</div>\r\n      <div role=\"td\" className=\"team-row-element-cell\">\r\n        <div className=\"element-styled-media\" onClick={() => show(data.player)}>\r\n          <div className=\"element-media-img\">\r\n            <picture>\r\n              <source></source>\r\n              <img \r\n                alt={team.name}\r\n                className=\"element-media-shirt\" \r\n                src={`${shirt}-66.png`} \r\n                srcSet={`${shirt}-66.png 66w, ${shirt}-110.png 110w, ${shirt}-220.png 220w`}\r\n                sizes=\"24px\"\r\n              ></img>\r\n            </picture>\r\n            <div className={`element-status player-status-${data.player.status}`}></div>\r\n          </div>\r\n          <div className=\"element-media-body\">\r\n            <div className=\"element-body-name\">{data.info.is_captain ? <b>{data.info.multiplier === 3 ? '[3xC]' : '[C]'} </b>: (data.info.is_vice_captain ? <b>[V] </b>:null)}{data.player.web_name} <small>{setPieceString(data.player)}</small></div>\r\n            <div className=\"element-body-info\">\r\n              <Fixtures data={fixture} amount={5} mini />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div role=\"td\" className=\"team-row-element-stats\">{data.points.bonus ? <div>{data.points.bonus + data.points.value} <span className=\"player-points-info\">({data.points.value} + {data.points.bonus})</span></div> : data.points.value ? `${data.points.value}` : null}</div>\r\n    </div>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\MainApp\\components\\PlayerFixtures\\index.js",[],"C:\\Projects\\fpl-mate\\src\\MainApp\\components\\ModalPlayer\\index.js",[],"C:\\Projects\\fpl-mate\\src\\MainApp\\components\\PlayerHistory\\index.js",[],"C:\\Projects\\fpl-mate\\src\\SettingsPage\\components\\Cache\\index.js",["255"],"import React from 'react';\r\nimport { Button, Accordion, Card } from 'react-bootstrap';\r\nimport PremierContext from '../../../PremierContext';\r\n\r\nexport default function SettingsPage({ eventKey }) {\r\n  const { recentSearches, defaultUser, defaultPage, clearCache } = React.useContext(PremierContext);\r\n\r\n  const clearUserCache = (e) => {\r\n    e.preventDefault();\r\n    clearCache();\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <Accordion.Toggle as={Card.Header} eventKey={eventKey} style={{ textAlign: 'left', color: '#484848ad'}}>\r\n        <span style={{ fontWeight: '600' }}>Cache</span>\r\n      </Accordion.Toggle>\r\n      <Accordion.Collapse eventKey={eventKey}>\r\n        <Card.Body>\r\n          <div className=\"cache-option\" style={{ textAlign: 'left', fontSize: 'small' }}>\r\n            <div>Local profiles: {recentSearches.length}</div>\r\n            <div>Default team: {!defaultUser || defaultUser == 0 ? 'Not Set' : defaultUser}</div>\r\n            <div>PageAfterRefresh: {defaultPage}</div>\r\n            <br />\r\n            <div className=\"option-action\">\r\n              <Button variant=\"danger\" size=\"sm\" block onClick={clearUserCache}>Clear cache</Button>\r\n            </div>\r\n          </div>\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\SettingsPage\\components\\Standings\\index.js",["256","257","258","259","260"],"import React from 'react';\r\nimport { Button, Accordion, Card } from 'react-bootstrap';\r\nimport PremierContext from '../../../PremierContext';\r\n\r\nexport default function SettingsPage({ eventKey }) {\r\n  const { recentSearches, defaultUser, defaultPage, clearCache } = React.useContext(PremierContext);\r\n\r\n  const clearUserCache = (e) => {\r\n    e.preventDefault();\r\n    clearCache();\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <Accordion.Toggle as={Card.Header} eventKey={eventKey} style={{ textAlign: 'left'}}>\r\n        Standings\r\n      </Accordion.Toggle>\r\n      <Accordion.Collapse eventKey={eventKey}>\r\n        <Card.Body>\r\n          <div className=\"cache-option\">Standings</div>\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n  )\r\n}","C:\\Projects\\fpl-mate\\src\\SettingsPage\\components\\Leagues\\index.js",["261","262","263","264","265"],"import React from 'react';\r\nimport { Button, Accordion, Card } from 'react-bootstrap';\r\nimport PremierContext from '../../../PremierContext';\r\n\r\nexport default function LeagueOptions({ eventKey }) {\r\n  const { recentSearches, defaultUser, defaultPage, clearCache } = React.useContext(PremierContext);\r\n\r\n\r\n  return (\r\n    <Card>\r\n      <Accordion.Toggle as={Card.Header} eventKey={eventKey} style={{ textAlign: 'left'}}>\r\n        League\r\n      </Accordion.Toggle>\r\n      <Accordion.Collapse eventKey={eventKey}>\r\n        <Card.Body>\r\n          <div className=\"cache-option\">Options</div>\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n  )\r\n}",{"ruleId":"266","replacedBy":"267"},{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","severity":1,"message":"271","line":31,"column":9,"nodeType":"272","messageId":"273","endLine":31,"endColumn":17},{"ruleId":"274","severity":1,"message":"275","line":35,"column":48,"nodeType":"276","messageId":"277","endLine":35,"endColumn":50},{"ruleId":"278","severity":1,"message":"279","line":3,"column":1,"nodeType":"280","endLine":50,"endColumn":2},{"ruleId":"270","severity":1,"message":"281","line":1,"column":17,"nodeType":"272","messageId":"273","endLine":1,"endColumn":26},{"ruleId":"282","severity":1,"message":"283","line":54,"column":31,"nodeType":"284","messageId":"277","endLine":54,"endColumn":33},{"ruleId":"270","severity":1,"message":"285","line":5,"column":8,"nodeType":"272","messageId":"273","endLine":5,"endColumn":14},{"ruleId":"270","severity":1,"message":"286","line":6,"column":8,"nodeType":"272","messageId":"273","endLine":6,"endColumn":17},{"ruleId":"282","severity":1,"message":"283","line":8,"column":38,"nodeType":"284","messageId":"277","endLine":8,"endColumn":40},{"ruleId":"270","severity":1,"message":"287","line":45,"column":9,"nodeType":"272","messageId":"273","endLine":45,"endColumn":19},{"ruleId":"274","severity":1,"message":"288","line":17,"column":58,"nodeType":"276","messageId":"277","endLine":17,"endColumn":60},{"ruleId":"274","severity":1,"message":"275","line":25,"column":23,"nodeType":"276","messageId":"277","endLine":25,"endColumn":25},{"ruleId":"270","severity":1,"message":"289","line":2,"column":10,"nodeType":"272","messageId":"273","endLine":2,"endColumn":20},{"ruleId":"270","severity":1,"message":"290","line":2,"column":22,"nodeType":"272","messageId":"273","endLine":2,"endColumn":33},{"ruleId":"270","severity":1,"message":"291","line":2,"column":35,"nodeType":"272","messageId":"273","endLine":2,"endColumn":41},{"ruleId":"270","severity":1,"message":"292","line":3,"column":10,"nodeType":"272","messageId":"273","endLine":3,"endColumn":19},{"ruleId":"270","severity":1,"message":"293","line":57,"column":36,"nodeType":"272","messageId":"273","endLine":57,"endColumn":47},{"ruleId":"270","severity":1,"message":"294","line":58,"column":36,"nodeType":"272","messageId":"273","endLine":58,"endColumn":47},{"ruleId":"295","severity":1,"message":"296","line":68,"column":6,"nodeType":"297","endLine":68,"endColumn":32,"suggestions":"298"},{"ruleId":"282","severity":1,"message":"283","line":117,"column":24,"nodeType":"284","messageId":"277","endLine":117,"endColumn":27},{"ruleId":"270","severity":1,"message":"299","line":120,"column":11,"nodeType":"272","messageId":"273","endLine":120,"endColumn":13},{"ruleId":"270","severity":1,"message":"300","line":120,"column":15,"nodeType":"272","messageId":"273","endLine":120,"endColumn":20},{"ruleId":"274","severity":1,"message":"288","line":194,"column":57,"nodeType":"276","messageId":"277","endLine":194,"endColumn":59},{"ruleId":"274","severity":1,"message":"275","line":202,"column":25,"nodeType":"276","messageId":"277","endLine":202,"endColumn":27},{"ruleId":"270","severity":1,"message":"301","line":52,"column":9,"nodeType":"272","messageId":"273","endLine":52,"endColumn":12},{"ruleId":"295","severity":1,"message":"302","line":52,"column":57,"nodeType":"297","endLine":52,"endColumn":67,"suggestions":"303"},{"ruleId":"295","severity":1,"message":"304","line":72,"column":6,"nodeType":"297","endLine":72,"endColumn":16,"suggestions":"305"},{"ruleId":"306","severity":1,"message":"307","line":250,"column":18,"nodeType":"308","messageId":"309","endLine":250,"endColumn":19,"fix":"310"},{"ruleId":"270","severity":1,"message":"311","line":261,"column":41,"nodeType":"272","messageId":"273","endLine":261,"endColumn":62},{"ruleId":"270","severity":1,"message":"312","line":262,"column":27,"nodeType":"272","messageId":"273","endLine":262,"endColumn":34},{"ruleId":"295","severity":1,"message":"313","line":263,"column":76,"nodeType":"297","endLine":263,"endColumn":94,"suggestions":"314"},{"ruleId":"270","severity":1,"message":"315","line":310,"column":9,"nodeType":"272","messageId":"273","endLine":310,"endColumn":14},{"ruleId":"270","severity":1,"message":"316","line":3,"column":8,"nodeType":"272","messageId":"273","endLine":3,"endColumn":22},{"ruleId":"270","severity":1,"message":"317","line":6,"column":8,"nodeType":"272","messageId":"273","endLine":6,"endColumn":22},{"ruleId":"270","severity":1,"message":"318","line":161,"column":12,"nodeType":"272","messageId":"273","endLine":161,"endColumn":29},{"ruleId":"270","severity":1,"message":"319","line":166,"column":9,"nodeType":"272","messageId":"273","endLine":166,"endColumn":16},{"ruleId":"274","severity":1,"message":"275","line":226,"column":73,"nodeType":"276","messageId":"277","endLine":226,"endColumn":75},{"ruleId":"274","severity":1,"message":"275","line":227,"column":72,"nodeType":"276","messageId":"277","endLine":227,"endColumn":74},{"ruleId":"274","severity":1,"message":"275","line":227,"column":98,"nodeType":"276","messageId":"277","endLine":227,"endColumn":100},{"ruleId":"270","severity":1,"message":"320","line":3,"column":8,"nodeType":"272","messageId":"273","endLine":3,"endColumn":18},{"ruleId":"270","severity":1,"message":"312","line":129,"column":30,"nodeType":"272","messageId":"273","endLine":129,"endColumn":37},{"ruleId":"295","severity":1,"message":"321","line":28,"column":6,"nodeType":"297","endLine":28,"endColumn":14,"suggestions":"322"},{"ruleId":"323","severity":1,"message":"324","line":48,"column":11,"nodeType":"325","endLine":48,"endColumn":28},{"ruleId":"270","severity":1,"message":"326","line":1,"column":38,"nodeType":"272","messageId":"273","endLine":1,"endColumn":45},{"ruleId":"270","severity":1,"message":"291","line":2,"column":17,"nodeType":"272","messageId":"273","endLine":2,"endColumn":23},{"ruleId":"270","severity":1,"message":"327","line":5,"column":8,"nodeType":"272","messageId":"273","endLine":5,"endColumn":25},{"ruleId":"295","severity":1,"message":"328","line":24,"column":6,"nodeType":"297","endLine":24,"endColumn":14,"suggestions":"329"},{"ruleId":"270","severity":1,"message":"312","line":44,"column":11,"nodeType":"272","messageId":"273","endLine":44,"endColumn":18},{"ruleId":"295","severity":1,"message":"330","line":58,"column":6,"nodeType":"297","endLine":58,"endColumn":22,"suggestions":"331"},{"ruleId":"323","severity":1,"message":"324","line":106,"column":13,"nodeType":"325","endLine":106,"endColumn":58},{"ruleId":"270","severity":1,"message":"293","line":18,"column":33,"nodeType":"272","messageId":"273","endLine":18,"endColumn":44},{"ruleId":"270","severity":1,"message":"294","line":19,"column":32,"nodeType":"272","messageId":"273","endLine":19,"endColumn":43},{"ruleId":"295","severity":1,"message":"332","line":27,"column":8,"nodeType":"297","endLine":27,"endColumn":29,"suggestions":"333"},{"ruleId":"270","severity":1,"message":"334","line":60,"column":17,"nodeType":"272","messageId":"273","endLine":60,"endColumn":24},{"ruleId":"270","severity":1,"message":"335","line":61,"column":11,"nodeType":"272","messageId":"273","endLine":61,"endColumn":29},{"ruleId":"270","severity":1,"message":"336","line":63,"column":38,"nodeType":"272","messageId":"273","endLine":63,"endColumn":49},{"ruleId":"295","severity":1,"message":"337","line":206,"column":5,"nodeType":"297","endLine":206,"endColumn":23,"suggestions":"338"},{"ruleId":"270","severity":1,"message":"339","line":1,"column":17,"nodeType":"272","messageId":"273","endLine":1,"endColumn":28},{"ruleId":"270","severity":1,"message":"340","line":2,"column":8,"nodeType":"272","messageId":"273","endLine":2,"endColumn":17},{"ruleId":"295","severity":1,"message":"341","line":216,"column":6,"nodeType":"297","endLine":216,"endColumn":17,"suggestions":"342"},{"ruleId":"270","severity":1,"message":"312","line":282,"column":17,"nodeType":"272","messageId":"273","endLine":282,"endColumn":24},{"ruleId":"270","severity":1,"message":"343","line":308,"column":10,"nodeType":"272","messageId":"273","endLine":308,"endColumn":20},{"ruleId":"270","severity":1,"message":"312","line":313,"column":17,"nodeType":"272","messageId":"273","endLine":313,"endColumn":24},{"ruleId":"270","severity":1,"message":"344","line":2,"column":15,"nodeType":"272","messageId":"273","endLine":2,"endColumn":20},{"ruleId":"295","severity":1,"message":"345","line":71,"column":6,"nodeType":"297","endLine":71,"endColumn":17,"suggestions":"346"},{"ruleId":"295","severity":1,"message":"347","line":81,"column":6,"nodeType":"297","endLine":81,"endColumn":16,"suggestions":"348"},{"ruleId":"270","severity":1,"message":"349","line":87,"column":9,"nodeType":"272","messageId":"273","endLine":87,"endColumn":21},{"ruleId":"295","severity":1,"message":"328","line":159,"column":6,"nodeType":"297","endLine":159,"endColumn":14,"suggestions":"350"},{"ruleId":"270","severity":1,"message":"312","line":179,"column":17,"nodeType":"272","messageId":"273","endLine":179,"endColumn":24},{"ruleId":"295","severity":1,"message":"351","line":239,"column":6,"nodeType":"297","endLine":239,"endColumn":17,"suggestions":"352"},{"ruleId":"266","replacedBy":"353"},{"ruleId":"268","replacedBy":"354"},{"ruleId":"355","severity":1,"message":"356","line":58,"column":47,"nodeType":"357","endLine":58,"endColumn":56},{"ruleId":"355","severity":1,"message":"356","line":59,"column":48,"nodeType":"357","endLine":59,"endColumn":57},{"ruleId":"355","severity":1,"message":"356","line":70,"column":45,"nodeType":"357","endLine":70,"endColumn":54},{"ruleId":"270","severity":1,"message":"312","line":101,"column":30,"nodeType":"272","messageId":"273","endLine":101,"endColumn":37},{"ruleId":"355","severity":1,"message":"356","line":117,"column":12,"nodeType":"357","endLine":117,"endColumn":21},{"ruleId":"355","severity":1,"message":"356","line":118,"column":12,"nodeType":"357","endLine":118,"endColumn":21},{"ruleId":"355","severity":1,"message":"356","line":141,"column":12,"nodeType":"357","endLine":141,"endColumn":21},{"ruleId":"274","severity":1,"message":"288","line":22,"column":61,"nodeType":"276","messageId":"277","endLine":22,"endColumn":63},{"ruleId":"270","severity":1,"message":"291","line":2,"column":10,"nodeType":"272","messageId":"273","endLine":2,"endColumn":16},{"ruleId":"270","severity":1,"message":"358","line":6,"column":11,"nodeType":"272","messageId":"273","endLine":6,"endColumn":25},{"ruleId":"270","severity":1,"message":"359","line":6,"column":27,"nodeType":"272","messageId":"273","endLine":6,"endColumn":38},{"ruleId":"270","severity":1,"message":"360","line":6,"column":40,"nodeType":"272","messageId":"273","endLine":6,"endColumn":51},{"ruleId":"270","severity":1,"message":"361","line":8,"column":9,"nodeType":"272","messageId":"273","endLine":8,"endColumn":23},{"ruleId":"270","severity":1,"message":"291","line":2,"column":10,"nodeType":"272","messageId":"273","endLine":2,"endColumn":16},{"ruleId":"270","severity":1,"message":"358","line":6,"column":11,"nodeType":"272","messageId":"273","endLine":6,"endColumn":25},{"ruleId":"270","severity":1,"message":"359","line":6,"column":27,"nodeType":"272","messageId":"273","endLine":6,"endColumn":38},{"ruleId":"270","severity":1,"message":"360","line":6,"column":40,"nodeType":"272","messageId":"273","endLine":6,"endColumn":51},{"ruleId":"270","severity":1,"message":"362","line":6,"column":53,"nodeType":"272","messageId":"273","endLine":6,"endColumn":63},"no-native-reassign",["363"],"no-negated-in-lhs",["364"],"no-unused-vars","'findUser' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'League' is defined but never used.","'Standings' is defined but never used.","'selectUser' is assigned a value but never used.","Expected '===' and instead saw '=='.","'InputGroup' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'Typeahead' is defined but never used.","'pickLoading' is assigned a value but never used.","'liveLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadMyStuff'. Either include it or remove the dependency array.","ArrayExpression",["365"],"'id' is assigned a value but never used.","'setId' is assigned a value but never used.","'fix' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'fetchFixtures'. Either include it or remove the dependency array.",["366"],"React Hook useEffect has a missing dependency: 'fetchFixtures'. Either include it or remove the dependency array.",["367"],"rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"368","text":"369"},"'getPointsFromLiveData' is assigned a value but never used.","'loading' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'calculateGame'. Either include it or remove the dependency array.",["370"],"'shirt' is assigned a value but never used.","'PremierContext' is defined but never used.","'usePremierData' is defined but never used.","'getCardsFromMatch' is defined but never used.","'yellows' is assigned a value but never used.","'PlayerCard' is defined but never used.","React Hook useEffect has a missing dependency: 'getFavouriteShirt'. Either include it or remove the dependency array.",["371"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useMemo' is defined but never used.","'PlayerSuggestions' is defined but never used.","React Hook useCallback has a missing dependency: 'getElementInfo'. Either include it or remove the dependency array.",["372"],"React Hook useEffect has missing dependencies: 'getPlayerPicture', 'getRole', and 'getTeamById'. Either include them or remove the dependency array.",["373"],"React Hook useEffect has a missing dependency: 'loadstuff'. Either include it or remove the dependency array.",["374"],"'setPage' is assigned a value but never used.","'useLeagueStandings' is assigned a value but never used.","'loadingData' is assigned a value but never used.","React Hook React.useCallback has missing dependencies: 'isItemLoaded', 'preview', and 'user.id'. Either include them or remove the dependency array. If 'preview' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["375"],"'useCallback' is defined but never used.","'Datatable' is defined but never used.","React Hook useEffect has missing dependencies: 'getTeamById' and 'listPlayers'. Either include them or remove the dependency array.",["376"],"'Suggestion' is defined but never used.","'Badge' is defined but never used.","React Hook useEffect has a missing dependency: 'listPlayers'. Either include it or remove the dependency array.",["377"],"React Hook useEffect has missing dependencies: 'filters' and 'list'. Either include them or remove the dependency array.",["378"],"'changeFilter' is assigned a value but never used.",["379"],"React Hook useEffect has missing dependencies: 'list' and 'listPlayers'. Either include them or remove the dependency array.",["380"],["363"],["364"],"jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","'recentSearches' is assigned a value but never used.","'defaultUser' is assigned a value but never used.","'defaultPage' is assigned a value but never used.","'clearUserCache' is assigned a value but never used.","'clearCache' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},[9718,9719],"",{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"391","fix":"405"},{"desc":"406","fix":"407"},"Update the dependencies array to be: [pickData, liveData, user, loadMyStuff]",{"range":"408","text":"409"},"Update the dependencies array to be: [fetchFixtures]",{"range":"410","text":"411"},"Update the dependencies array to be: [fetchFixtures, offset]",{"range":"412","text":"413"},"Update the dependencies array to be: [calculateGame, data, liveData]",{"range":"414","text":"415"},"Update the dependencies array to be: [getFavouriteShirt, user]",{"range":"416","text":"417"},"Update the dependencies array to be: [getElementInfo, player.id]",{"range":"418","text":"419"},"Update the dependencies array to be: [getPlayerPicture, getRole, getTeamById, player, show]",{"range":"420","text":"421"},"Update the dependencies array to be: [picks, live, user, loadstuff]",{"range":"422","text":"423"},"Update the dependencies array to be: [isItemLoaded, prepareRow, preview, rows, user.id]",{"range":"424","text":"425"},"Update the dependencies array to be: [current, getTeamById, listPlayers]",{"range":"426","text":"427"},"Update the dependencies array to be: [current, listPlayers]",{"range":"428","text":"429"},"Update the dependencies array to be: [filter, filters, list]",{"range":"430","text":"431"},{"range":"432","text":"419"},"Update the dependencies array to be: [current, list, listPlayers]",{"range":"433","text":"434"},[2434,2460],"[pickData, liveData, user, loadMyStuff]",[2312,2322],"[fetchFixtures]",[2785,2795],"[fetchFixtures, offset]",[10200,10218],"[calculateGame, data, liveData]",[1060,1068],"[getFavouriteShirt, user]",[823,831],"[getElementInfo, player.id]",[1852,1868],"[getPlayerPicture, getRole, getTeamById, player, show]",[1112,1133],"[picks, live, user, loadstuff]",[6005,6023],"[isItemLoaded, prepareRow, preview, rows, user.id]",[6406,6417],"[current, getTeamById, listPlayers]",[2778,2789],"[current, listPlayers]",[3048,3058],"[filter, filters, list]",[5738,5746],[8568,8579],"[current, list, listPlayers]"]